<apex:page standardController="Opportunity" extensions="CRM_UploadExtractTradeTactics" showHeader="false" sidebar="false" applyHtmlTag="true" applyBodyTag="true">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" charset="utf8" >
        <head>
            <meta http-equiv="x-ua-compatible" content="ie=edge"></meta>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"></meta>
            <apex:includeScript value="{!URLFOR($Resource.CRM_Resource_Library, 'js/jquery.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.CRM_Resource_Library, 'js/angular.min.js')}" />
            
            <!------------ handsontable Pro JS AND CSS (US : 989)-------------------->
            <apex:includeScript value="{!URLFOR($Resource[handsontableversion], 'handsontable.full.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource[handsontableversion], 'handsontable.full.js')}"/>
            <apex:stylesheet value="{!URLFOR($Resource[handsontableversion], 'handsontable.full.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource[handsontableversion], 'handsontable.full.min.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource[handsontableversion], 'handsontable.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource[handsontableversion], 'handsontable.min.css')}"/>
            
            <apex:includeScript value="{!URLFOR($Resource[handsontableversion], 'ngHandsontable.min.js')}" />
            
            <apex:includeScript value="{!URLFOR($Resource[handsontableversion], 'languages/all.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource[handsontableversion], 'numbro/languages.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource[handsontableversion], 'numbro/languages.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource[handsontableversion], 'numbro/numbro.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource[handsontableversion], 'moment/moment.js')}"/>
            <!------------ handsontable Pro JS AND CSS (US : 989)-------------------->
            
            <apex:stylesheet value="{!URLFOR($Resource.SLDS0120, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />
            <apex:stylesheet value="{!URLFOR($Resource.CRM_DealProductFileUpload, 'CRM_DealProductFileUpload/css/main.css')}" />
            
            <apex:includeScript value="{!URLFOR($Resource.CRM_Resource_Library, 'js/crm-components.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.CRM_AddProducts_Resources, 'js/data-service.js')}" /> 
            <apex:includeScript value="../../soap/ajax/34.0/connection.js" />
            <apex:includeScript value="{!URLFOR($Resource.CRM_Dynamic_Locale)}/js/locale/angular-locale_{!userLocaleLowerCase}.js"/>
            <style>
                .wordWrapClass{
                    text-overflow: ellipsis;
                    white-space: nowrap !important;
                    max-width: 20px;
                }
                .slds .slds-notify--toast{
                    margin: 8px 8px 5px;   
                }
                #warningMessageDiv .slds-modal__header{
                    padding: 0 !important;
                    border-bottom: 0 !important;
                }
                #warningMessageDiv .slds-modal__content{
                    border-top-right-radius: 0.25rem;
                    border-top-left-radius: 0.25rem;
                }
                #warningMessageDiv .slds-modal--large .slds-modal__container{
                    width: 55%;
                }
                <!------------ handsontable Pro JS AND CSS (US : 989)-------------------->
                .handsontable thead th {
                    background-color: #4F6A92 !important;
                    color: white !important;
                }
                .handsontableInputHolder .handsontableInput{
                    background-color: white !important;
                }
                #hot-display-license-info{
                    display: none;
                }
                <!------------ handsontable Pro JS AND CSS (US : 989)-------------------->
            </style>
            <script type="text/javascript">  
                window.$Label = window.$Label || {};
                window.$Label.selectNoneValueForPicklist = "{!$Label.CRM_Select_None_Value}";
                
                /* Pass a few dynamic parameters */
                angular.module("appConfig", [])
                    .service("appConfig", function() {
                         return {
                            resourceSlds: '{!URLFOR($Resource.SLDS0120)}'.replace('?isdtp=p1', ''),
                            apexController: CRM_UploadExtractTradeTactics,
                            dealId: '{!Opportunity.Id}',
                            priceBookId : '{!Opportunity.Pricebook2Id}',
                            dealCurrency : '{!Opportunity.CurrencyISOCode}',
                            accountName: '{!JSENCODE(Opportunity.Account.name)}',
                            dealStartDate: '{!Opportunity.Start_date__c}',
                            dealEndDate: '{!Opportunity.CloseDate}',
                            userLocal: '{!UserLocale}',
                            userDateFormat: '{!UserDateFormat}',
                            dealStageName: '{!Opportunity.StageName}',
                            displayQtyCol : {!displayQtyCol},
                            isAutomaticDeal: {!isAutomaticDeal},
                            totalCoopBudget: {!totalCoopBudget},
                            mapOfVVToTotalCBA: '{!mapOfVVToTotalCBA}',
                            handsontableProLicenseKey: '{!HandsonTable_Pro_Licencekey}', //Added for US 989 
                            oppName : '{!JSENCODE(Opportunity.name)}' //Added for US 989
                         };
                     });
                
            </script>

            <script>
                angular.module("UploadTactics", ['ngHandsontable', 'appConfig', 'crm-components', 'sfdcDataService','ngLocale'])
                    .controller("UploadTacticsController", ['$scope', '$timeout', 'appConfig', 'getSelectOptionsService','$locale', function($scope, $timeout, appConfig, getSelectOptionsService,$locale) {   
                        $scope.showSpinner = false;
                        $scope.appConfig = appConfig;
                        $scope.tacticData = [];  
                        $scope.isLightningExperienceOrSf1 = ((typeof sforce != 'undefined') && sforce && (!!sforce.one));
                        $scope.coopReasonOptions =[];
                        $scope.coopReasonOptionsForAccruingTactics =[];
                        $scope.coopReasonOptionsForNonAccruingTactics =[];
                        $scope.DealProductStatus = [];
                        
                        $scope.UserLocal = $scope.appConfig.userLocal; 
                        $scope.UserDateFormat = $scope.appConfig.userDateFormat;
                        $scope.UserDateFormatInUpperCase = $scope.UserDateFormat.toUpperCase();
                        $scope.startDate = convertDate($scope.appConfig.dealStartDate); //Defect 4654
                        $scope.closeDate = convertDate($scope.appConfig.dealEndDate); //Defect 4654
                
                        <!-------- Defect 4654 ------->
                        function convertDate(dateVal){
                            $scope.DateObj = new Date(dateVal);
                            $scope.totalMinute = ($scope.DateObj.getMinutes() + $scope.DateObj.getTimezoneOffset());
                            $scope.DateObj.setMinutes($scope.totalMinute);
                            return $scope.DateObj.toLocaleDateString($scope.UserLocal);
                        };   
                        <!-------- Defect 4654 ------->
                        
                        var initalHeight = ($(window).height() - $('#headerDiv').height() - 40);
                        $scope.height = initalHeight;
                        
                        //US#914 starts 
                        $scope.dealStage = $scope.appConfig.dealStageName;
                        $scope.dealStagePlanned = false;
                        $scope.dealStageCommitted = false;
                        $scope.dealStageRevised = false;
                        
                        if($scope.dealStage == '{!$Label.CRM_Status_Planned}'){
                            $scope.dealStagePlanned = true;
                        }
                        if($scope.dealStage == '{!$Label.CRM_Status_Committed}'){
                            $scope.dealStageCommitted = true;
                        }
                        if($scope.dealStage == '{!$Label.CRM_Status_Revised}'){
                            $scope.dealStageRevised = true;
                        }
                        
                        var committedStageFields = new Set();
                        committedStageFields.add('startDate');
                        committedStageFields.add('endDate');
                        committedStageFields.add('coopComments');
                        committedStageFields.add('coopReason');
                        committedStageFields.add('posRebate');
                        committedStageFields.add('posActual');
                        committedStageFields.add('coopActualAmt');
                        committedStageFields.add('custReference');
                        committedStageFields.add('digitalMembership');
                        committedStageFields.add('status');
                        
                        var committedStageFieldsForCanada = new Set();
                        committedStageFieldsForCanada.add('startDate');
                        committedStageFieldsForCanada.add('endDate');
                        committedStageFieldsForCanada.add('coopComments');
                        committedStageFieldsForCanada.add('coopReason');
                        committedStageFieldsForCanada.add('posActual');
                        committedStageFieldsForCanada.add('coopActualAmt');
                        committedStageFieldsForCanada.add('custReference');
                        committedStageFieldsForCanada.add('digitalMembership');
                        committedStageFieldsForCanada.add('status');
                        
                        
                        var plannedStageFields = new Set();
                        plannedStageFields.add('startDate');
                        plannedStageFields.add('endDate');
                        plannedStageFields.add('coopComments');
                        plannedStageFields.add('coopReason');
                        plannedStageFields.add('posRebate');
                        plannedStageFields.add('posForecast');
                        plannedStageFields.add('custReference');
                        plannedStageFields.add('coopActualAmt');
                        plannedStageFields.add('coopReqAmount');
                        plannedStageFields.add('digitalMembership');
                        plannedStageFields.add('status');
                        plannedStageFields.add('productCode');
                        
                        var plannedStageFieldsForCanada = new Set();
                        plannedStageFieldsForCanada.add('startDate');
                        plannedStageFieldsForCanada.add('endDate');
                        plannedStageFieldsForCanada.add('coopComments');
                        plannedStageFieldsForCanada.add('coopReason');
                        plannedStageFieldsForCanada.add('custReference');
                        plannedStageFieldsForCanada.add('coopActualAmt');
                        plannedStageFieldsForCanada.add('coopReqAmount');
                        plannedStageFieldsForCanada.add('digitalMembership');
                        plannedStageFieldsForCanada.add('status');
                        plannedStageFieldsForCanada.add('productCode');
    
                        $scope.profileName = '{!$Profile.Name}';
                        $scope.isTFMUser = false;
                        if($scope.profileName == '{!$Label.CRM_TFM_Profile}'){
                           $scope.isTFMUser = true;
                        }
    
                        //US : 935
                        var mapOfVVToTotalCoopActualAmt = new Map();
                        var mapOfVVToTotalCoopBudgetAmt = new Map();
                        appConfig.mapOfVVToTotalCBA = appConfig.mapOfVVToTotalCBA.replace("{","");
                        appConfig.mapOfVVToTotalCBA = appConfig.mapOfVVToTotalCBA.replace("}","");
                        $.each(appConfig.mapOfVVToTotalCBA.split(','), function( rowKey, object) {
                            if(object){
                                var keyValuePair = object.split('=');
                                mapOfVVToTotalCoopBudgetAmt.set(keyValuePair[0].trim(),parseFloat(keyValuePair[1].trim()));
                            }
                        });
                        
                        //Added For US : 994
                        $scope.resultFilterValues = [{label:'{!$Label.CRM_All_Value_For_Content_Type}', value:"all"},{label:'{!$Label.CRM_Clone_Deal_Error}',value:"error"},{label:'{!$Label.CRM_Success_Message}',value:"success"}];
                        $scope.resultFilter = [];
                        $scope.nonProcessedRecrods = [];
                        $scope.sucessRecords = [];
                        $scope.errorRecords = [];
                        $scope.previouslySelectedFilterValue;
                        $scope.sortObj = {column:0,order:"none"};
                        $scope.filterdColIndex = [];
                       
                        $scope.init = function() {
                            $scope.showSpinner = true;
                            $scope.GetLineItems('{!Opportunity.Id}'); 
                        } 
               
                        var container = document.getElementById('tableDiv'); 
                        var hot;
                        $timeout(setHotVar,0);
                        function setHotVar(){
                            hot = new Handsontable(container,
                            {
                                data: $scope.tacticData,
                                colHeaders: true,
                                height: $scope.height,
                                trimDropdown: false,
                                renderAllRows: true,//Added for US : 994
                                contextMenu: {
                                                items: {
                                                    "remove_row": {
                                                        name: '{!$Label.CRM_Upload_Message_RemoveRow}'
                                                    }
                                                }
                                            },
                                colHeaders: [
                                    '{!$ObjectType.Account.fields.Name.Label}' ,
                                    '{!$ObjectType.OpportunityLineItem.fields.ProductCode.Label}', 
                                    '{!$ObjectType.Product2.fields.Name.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Start_date__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.End_date__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Reason__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Comments__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.POS_Rebate__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.POS_Forecast__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Co_op_Requested_Amount__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Pos_Actual__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Co_op_Actual_Amount__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Approved_By__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Status__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Customer_Reference__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Commitment_Number__c.Label}',
                                    '{!$ObjectType.OpportunityLineItem.fields.Digital_Membership__c.Label}',
                                    '{!$Label.CRM_Upload_Field_Validation}'   
                                ], 
                                columns: [
                                    { data: 'accountName', readOnly: true},
                                    { data: 'productCode', type: 'text'},
                                    { data: 'productName',readOnly: true},
                                    {
                                        data: 'startDate',
                                        type: 'date',
                                        dateFormat: $scope.UserDateFormatInUpperCase,
                                        correctFormat: true,
                                        defaultDate: $scope.startDate,
                                        datePickerConfig: {
                                            firstDay: 0,
                                            showWeekNumber: true,
                                            numberOfMonths: 1,
                                            i18n: {
                                                months        : $locale.DATETIME_FORMATS.MONTH,
                                                weekdays      : $locale.DATETIME_FORMATS.DAY,
                                                weekdaysShort : $locale.DATETIME_FORMATS.SHORTDAY
                                            }
                                        } 
                                    },
                                    {
                                        data: 'endDate',
                                        type: 'date',
                                        dateFormat: $scope.UserDateFormatInUpperCase,
                                        correctFormat: true,
                                        defaultDate: $scope.closeDate,
                                        datePickerConfig: {
                                            firstDay: 0,
                                            showWeekNumber: true,
                                            numberOfMonths: 1,
                                            i18n: {
                                                months        : $locale.DATETIME_FORMATS.MONTH,
                                                weekdays      : $locale.DATETIME_FORMATS.DAY,
                                                weekdaysShort : $locale.DATETIME_FORMATS.SHORTDAY
                                            }
                                        }
                                    },
                                    { data: 'coopReason' , type: 'dropdown',source: $scope.coopReasonOptions},
                                    { data: 'coopComments', type: 'text' , editor: 'maxlength' , maxLength : 255},
                                    { data: 'posRebate' , type: 'numeric', numericFormat: { pattern: '0,0.00',culture: 'en-US'}},
                                    { data: 'posForecast', type: 'numeric', numericFormat: { pattern: '0,0.00',culture: 'en-US'}},
                                    { data: 'coopReqAmount', type: 'numeric', numericFormat: { pattern: '0,0.00',culture: 'en-US'}},
                                    { data: 'posActual', type: 'numeric',readOnly: true, numericFormat: { pattern: '0,0.00',culture: 'en-US'}},
                                    { data: 'coopActualAmt', type: 'numeric',readOnly: true, numericFormat: { pattern: '0,0.00',culture: 'en-US'}},
                                    { data: 'approvedBy', type: 'text'},  //US#995 Add approved by to Tactics
                                    { data: 'status'},
                                    { data: 'custReference', type: 'text'}, 
                                    { data: 'commitmentNum', type: 'numeric', readOnly: true},
                                    { data: 'digitalMembership', type: 'text'}, 
                                    { data: 'validation',type: 'text', readOnly: true}
                                ], 
                                beforeRemoveRow: function(index, amount, visualRows) {
                                    var ele = this;
                                    if (!confirm('{!$Label.CRM_Upload_Message_Remove_Row}')) {
                                        return false;
                                    }
                                    var visualIndex = 0;
                                    if($scope.tacticData){
                                        //Added For US : 989
                                        for(i=index;i<index+amount;i++) {
                                            var item;
                                            if(visualRows[visualIndex] && $scope.tacticData[visualRows[visualIndex]]){
                                                $scope.tacticData[visualRows[visualIndex]].isRowRemoved = true;
                                                item =  $scope.tacticData[visualRows[visualIndex]];
                                            }else{
                                                $scope.tacticData[i].isRowRemoved=true;
                                                item = $scope.tacticData[i];
                                            }
                                            $scope.updateMapOFVVToCoopActualAmt(item,null,item.coopActualAmt);
                                            visualIndex++;
                                        }
                                        hot.render();
                                        $scope.$apply();
                                    }
                                    document.getElementById("quickSaveBtn").style.background ='#c23934';
                                    document.getElementById("quickSaveBtn").style.color = 'white';
                                    document.getElementById("quickSaveBtn").disabled = false;
                                    return false;
                                },
                                cells: function(row, col, prop) {
                                    var cellProperties = {};
                                    cellProperties.renderer = $scope.myRenderer;
                                    return cellProperties;
                                }, 
                                beforeChange: function(changes, source) {
                                    var ele = this;
                                    if (changes && changes.length > 0) {
                                        $.each(changes, function(index, element) {
                                            if (element) { //Added For US : 820
                                                var elem = ele.getCellMeta(element[0], ele.propToCol(element[1]));
                                                var sortedRowIndex = changes[index][0];
                                                var prop =elem.prop;
                                                var oldValue =element[2];
                                                var newValue =element[3];
                                                
                                                // check if previous and new value of the cell is difference and 
                                                // cell is not the last column i.e. validation error/message
                                                if ($scope.tacticData && changes[index][2] != changes[index][3] && elem.prop != 'validation') {
                                                    var item = $scope.tacticData[ele.toPhysicalRow(changes[index][0])];
                                                    if (item) {
                                                        if(!(!oldValue && newValue == "")){
                                                            if(prop == 'coopActualAmt' || prop == 'coopReqAmount'){
                                                                $scope.updateMapOFVVToCoopActualAmt(item,newValue,oldValue);
                                                            }
                                                        }
                                                        
                                                        // DEF#4676 - Set boolean to identify that Status is locally changed to Cancelled
                                                        if (oldValue != newValue && newValue == 'Cancelled') {
                                                            item.isStatusCancelledLocally = true;
                                                        }
                                                    }
                                                }
                                            }
                                        });
                                    }
                                },
                                afterChange: function(changes, source) {
                                    var ele = this;
                                    if (changes && changes.length > 0) {
                                        $.each(changes, function(index, element) {
                                            if (element) { //Added For US : 820
                                                var elem = ele.getCellMeta(element[0], ele.propToCol(element[1]));
                                                var sortedRowIndex = changes[index][0];
                                                var col= elem.col;
                                                var prop =elem.prop;
                                                var oldValue =element[2];
                                                var newValue =element[3];
                                                // check if previous and new value of the cell is difference and 
                                                // cell is not the last column i.e. validation error/message
                                                if ($scope.tacticData && changes[index][2] != changes[index][3] && elem.prop != 'validation') {
                                                    
                                                    var item = $scope.tacticData[ele.toPhysicalRow(changes[index][0])];
                                                    if (item) {
                                                        if(changes[index][1] != 'previouslySelectedForRemoval' && changes[index][1] != 'isRowModified' && changes[index][1] != 'isRowRemoved'){
                                                            if(!item.existingId && ($scope.dealStagePlanned || $scope.dealStageRevised) && !(!oldValue && newValue == "")){
                                                                item.status = '{!$Label.CRM_Status_Planned}';
                                                                //hot.setDataAtCell(sortedRowIndex,12,item.status);  
                                                            }
                                                            
                                                            /* US#914 Reason = POS Rebate check below condition 
                                                                If deal/tactic is in Planned stage and reason is changed then coopReqAmount = coopActualAmt = posRebate * posForecast 
                                                                If deal/tactic is in Planned stage and posRebate/posForecast is changed then coopReqAmount = coopActualAmt = posRebate * posForecast
                                                                If deal/tactic is in Revised stage and posRebate/posForecast is changed and  posRebate & posForecast are equal then coopReqAmount = coopActualAmt = posRebate * posForecast
                                                            */
                                                            if((elem.prop == 'coopReason' && (newValue == 'POS Rebate' || newValue == 'Canada – POS Rebate')) || 
                                                               ((elem.prop == 'posRebate' || elem.prop == 'posForecast') && (item.coopReason == 'POS Rebate' || item.coopReason == 'Canada – POS Rebate'))){
                                                                
                                                                if( ((item.posRebate && item.posForecast) || item.posRebate == 0 || item.posForecast == 0) && 
                                                                    (typeof  item.posRebate == 'number') && 
                                                                    (typeof  item.posForecast == 'number') && 
                                                                    (
                                                                        //$scope.dealStagePlanned || 
                                                                        (
                                                                            ($scope.dealStageRevised || $scope.dealStagePlanned) && 
                                                                            // Aditi : 
                                                                            //    If TFM user adds new tactic with reason POS Rebate then calculation will flow only in Co-op Actual Amount
                                                                            //    OR even if POS Forcast / POS Rebate value is changed by TFM then Co-op Actual Amount should not be calculated
                                                                            (
                                                                                (
                                                                                    $scope.isTFMUser && 
                                                                                    (
                                                                                        (item.coopActualAmt == undefined || item.coopActualAmt == null || item.coopActualAmt == 0) 
                                                                                        || 
                                                                                        (item.coopReqAmount != undefined && item.coopReqAmount != null && ((item.coopReqAmount == item.coopActualAmt) || item.coopReason == 'Canada – POS Rebate'))
                                                                                    )
                                                                                ) || 
                                                                                (!$scope.isTFMUser && (item.coopReqAmount == item.coopActualAmt || item.coopReason == 'Canada – POS Rebate'))
                                                                            ) && 
                                                                            (item.status == '{!$Label.CRM_Status_Planned}' || (item.coopReason == 'Canada – POS Rebate'))
                                                                        )
                                                                    )  
                                                                ){
                                                                    
                                                                    if(!$scope.isTFMUser){
                                                                    item.coopReqAmount = (hot.getDataAtCell(sortedRowIndex,7)  * hot.getDataAtCell(sortedRowIndex,8));
                                                                        if(item.coopReason != 'Canada – POS Rebate')
                                                                            item.coopActualAmt = item.coopReqAmount;
                                                                    } 
                                                                    // Aditi : If TFM user adds new tactic with reason POS Rebate then calculation will flow only in Co-op Actual Amount
                                                                    else {
                                                                        // If not set null then throws error as type is set as number so we cannot allow undefined value in it
                                                                        if (item.coopReqAmount == undefined) {
                                                                            item.coopReqAmount = null;
                                                                        }
                                                                        item.coopActualAmt = (hot.getDataAtCell(sortedRowIndex,7)  * hot.getDataAtCell(sortedRowIndex,8));
                                                                    }
                                                                    //hot.setDataAtCell(sortedRowIndex,9,item.coopReqAmount);  
                                                                    //hot.setDataAtCell(sortedRowIndex,11,item.coopActualAmt);
                                                                }
                                                            }else if (!$scope.isTFMUser && elem.prop == 'coopReqAmount' && ($scope.dealStagePlanned || ($scope.dealStageRevised && (item.coopActualAmt == oldValue)))){
                                                                item.coopActualAmt = newValue;
                                                                //hot.setDataAtCell(sortedRowIndex,11,item.coopActualAmt);
                                                            }
                                                            if(!(!oldValue && newValue == "")){
                                                                
                                                                document.getElementById("quickSaveBtn").style.background ='#c23934';
                                                                document.getElementById("quickSaveBtn").style.color = 'white';
                                                            
                                                                item.isRowModified = true;
                                                                item.isRowRemoved = false;
                                                                item.previouslySelectedForRemoval = false;
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        });
                                        
                                        var currentEle = this;
                                        if(source === 'edit' || source === 'loadData ' || source === 'Autofill.fill' || source === 'CopyPaste.paste'){
                                            currentEle.render();
                                        }
                                    }
                                },
                                columnSorting: true, 
                                copyRowsLimit:2500,
                                minSpareRows: 0, 
                                manualColumnResize: false,
                                dropdownMenu: ['clear_column','alignment','filter_by_condition','filter_operators','filter_by_condition2','filter_by_value','filter_action_bar'],
                                filters: true,
                                licenseKey: appConfig.handsontableProLicenseKey,
                                afterColumnSort: function(column,order){
                                    $scope.sortObj.column = column;
                                    $scope.sortObj.order = order;
                                },
                                afterLoadData: function(firstTime){
                                    if($scope.resultFilter.length > 0 && ($scope.resultFilter[0].value == 'success' || $scope.resultFilter[0].value == 'error')){
                                        hot.updateSettings({minSpareRows: 0});
                                        if(hot.countEmptyRows(true)){
                                            hot.getPlugin('trimRows').trimRows([($scope.tacticData.length - 1)]);
                                            hot.render();
                                        }
                                    }else if(hot){
                                        hot.updateSettings({minSpareRows: 1});
                                    }
                                },
                                afterFilter: function(conditionsStack){
                                    $scope.filterdColIndex = [];
                                    if(conditionsStack.length > 0){
                                        $.each(conditionsStack, function(rowKey, object) {
                                            if($scope.resultFilter.length === 0 || ($scope.resultFilter.length > 0 && $scope.resultFilter[0].value == 'all')){
                                                $.each(object.conditions, function(rowKey,conditions) {
                                                    if(conditions.name == 'by_value'){
                                                        $.each(conditions.args[0], function(rowKey,arg) {
                                                            if(arg == "" && hot.countEmptyRows(true) === 0){
                                                                hot.alter('insert_row',($scope.tacticData.length));
                                                            }
                                                        });
                                                    }
                                                });
                                            }
                                            $scope.filterdColIndex.push(object.column);
                                        });
                                    }else{
                                        if($scope.resultFilter.length === 0 || ($scope.resultFilter.length > 0 && $scope.resultFilter[0].value == 'all')){
                                            if(hot.countEmptyRows(true) === 0){
                                                hot.alter('insert_row',($scope.tacticData.length));
                                            }
                                        }
                                    }
                                },
                                afterCreateRow: function(index, amount, source){
                                    if($scope.resultFilter.length > 0 && ($scope.resultFilter[0].value == 'success' || $scope.resultFilter[0].value == 'error')){
                                        if(hot && hot.isEmptyRow($scope.tacticData.length - 1)){
                                            hot.getPlugin('trimRows').trimRows([($scope.tacticData.length - 1)]);
                                            hot.render();
                                        }
                                    }
                                }
                            });
                        }
                        (function (Handsontable) {

                            'use strict';
                            
                            var MaxLengthEditor = Handsontable.editors.TextEditor.prototype.extend();
                            
                            MaxLengthEditor.prototype.prepare = function () {
                                Handsontable.editors.TextEditor.prototype.prepare.apply(this, arguments);
                                this.TEXTAREA.maxLength = this.cellProperties.maxLength;
                            };
                            
                            Handsontable.editors.registerEditor('maxlength', MaxLengthEditor);
                        
                        })(Handsontable);
                
                        $scope.myRenderer = function(instance, td, row, col, prop, value, cellProperties) {
                        
                            if(cellProperties.type == 'text'){
                                Handsontable.renderers.TextRenderer.apply(this, arguments);
                            }else if(cellProperties.type == 'numeric'){
                                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                            }else if(cellProperties.type == 'date'){
                                Handsontable.renderers.DateRenderer.apply(this, arguments);
                            }else if(cellProperties.type == 'dropdown'){
                                Handsontable.renderers.DropdownRenderer.apply(this, arguments);
                            }
                            
                            //Added to truncate Co-op Comments Column value
                            if(prop == 'coopComments'){
                                $(td).addClass("wordWrapClass");
                            }
                            
                            
                            if($scope.tacticData){
                                //Added For US : 994
                                var item = $scope.tacticData[cellProperties.row];
                                var cell = instance.getCell(cellProperties.row, col);
                                 
                                if(item && item.isRowRemoved){
                                    td.style.backgroundColor = 'grey';
                                    td.style.color = 'white';
                                    item.isRowModified = false;
                                    item.previouslySelectedForRemoval=true;
                                }else if(item && item.errorOccured  && item.errorOccured == true){
                                    td.style.backgroundColor = 'red';
                                    td.style.color = 'white';
                                    
                                    if (typeof item.previouslySelectedForRemoval != 'undefined' && !item.previouslySelectedForRemoval) {
                                        item.isRowModified = true;
                                    }
                                            
                                }else if(item && mapOfVVToTotalCoopActualAmt.has(item.videoVersion) && mapOfVVToTotalCoopBudgetAmt.has(item.videoVersion)){
                                    $scope.totalCAA = mapOfVVToTotalCoopActualAmt.get(item.videoVersion);
                                    $scope.totalCBA = mapOfVVToTotalCoopBudgetAmt.get(item.videoVersion);
                                    
                                    if($scope.totalCAA > $scope.totalCBA){
                                        td.style.backgroundColor = '#e7b439';
                                        $scope.mesList = '{!$Label.CRM_UploadExtractTactic_LocalData_Info_Msg}'.split(',');
                                        item.validation = $scope.mesList[0]+$scope.totalCAA+$scope.mesList[1]+$scope.totalCBA+$scope.mesList[2]+" \'"+item.localTitleName+"\'";
                                    }else{
                                        td.style.backgroundColor = null;
                                        td.style.color = null;
                                        if(item.validation != '{!$Label.CRM_Upload_Message_Updated}' && item.validation != '{!$Label.CRM_Upload_Message_Created}'){
                                            item.validation = ''
                                        }
                                    }
                                }else{ //Added For US : 820
                                    td.style.backgroundColor = null;
                                    td.style.color = null;
                                }
                                 //US#914
                                 /*
                                    If Reason = POS Rebate ,Deal stage = Planned then coopReqAmount & coopActualAmt should be readOnly
                                    If Reason = POS Rebate ,Deal stage = Revised then coopReqAmount & coopActualAmt should be readOnly if posRebate != posForecast
                                    
                                 */
                                 
                                 if(item){
                                    //DEF#4714 Pos Actual should be editable in Planned, Revised and Committed Deal Stage until Credit Note is not Linked ,removed code for Pos actual Field    
                                    if(prop != 'accountName' && prop != 'productName' && prop != 'validation' && prop != 'commitmentNum'){ 
                                        cellProperties.readOnly = false;
                                    }
                                    
                                    // Defect : 4650 : TFM profile should not be able to edit POS Forecast field in any Deal Stage
                                    if( prop == 'posForecast' &&  $scope.isTFMUser){
                                        cellProperties.readOnly = true;
                                    }
                                    
                                    //US#911
                                    /*if((prop == 'posRebate' || prop == 'posForecast') && item.coopReason != 'POS Rebate' ){
                                        cellProperties.readOnly = true;
                                    } */
                                    
                                    if(prop == 'status'){
                                        $scope.DealProductStatus = []; 
                                        if(item.existingId && (item.status == '{!$Label.CRM_Status_Committed}' || item.status == '{!$Label.CRM_Status_Planned}') && !item.isValidCreditNoteItemLinked){
                                            $scope.DealProductStatus.push(item.status);
                                            item.prevStatusBeforeCancelLocally = item.status;
                                            $scope.DealProductStatus.push('Cancelled');
                                            cellProperties.type = 'dropdown';
                                            cellProperties.source = $scope.DealProductStatus;
                                        } 
                                        // DEF#4676 - Condition added so that status is populated with picklist with Previously selected value along with Cancelled Status
                                        else if (item.existingId && item.status == 'Cancelled' && item.isStatusCancelledLocally && !item.isValidCreditNoteItemLinked) {
                                            $scope.DealProductStatus.push(item.prevStatusBeforeCancelLocally);
                                            $scope.DealProductStatus.push('Cancelled');
                                            cellProperties.type = 'dropdown';
                                            cellProperties.source = $scope.DealProductStatus;
                                        }else{
                                            // DEF#4676 - Condition added so that status is set as text only if it is not locally changed to Cancelled
                                            if (!(item.isStatusCancelledLocally && item.status == 'Cancelled')) {
                                                cellProperties.type = 'text';
                                                cellProperties.readOnly = true;
                                            }
                                         }
                                     }
                                   
                                     if(prop == 'coopReason' && item.existingId && item.existingId != ""){
                                        if(item.accruingTactic){
                                            $scope.coopReasonOptions = $scope.coopReasonOptionsForAccruingTactics;
                                            cellProperties.source = $scope.coopReasonOptions;
                                        }else{
                                            $scope.coopReasonOptions = $scope.coopReasonOptionsForNonAccruingTactics;
                                            cellProperties.source = $scope.coopReasonOptions;
                                        }
                                     }
                                     
                                     
                                     if(item.existingId && prop == 'productCode'){
                                         cellProperties.readOnly = true;
                                     }else if($scope.isTFMUser && !item.existingId && prop == 'coopReqAmount'){
                                         cellProperties.readOnly = true;
                                     }
                                      
                                     // Aditi : Removed Customer Reference as it needs to be read only if status is Payment in Progress, Paid, Cancelled AND Tactic is an Accruing Tactic
                                     if((item.status && item.status != '{!$Label.CRM_Status_Planned}' && item.status != '{!$Label.CRM_Status_Committed}' && item.status != '' && prop != 'coopComments' && prop != 'approvedBy' && item.accruingTactic) ||
                                        (prop != 'coopComments' && prop != 'approvedBy' && item.accruingTactic && item.isValidCreditNoteItemLinked)
                                     ){
                                         // DEF#4676 - Condition added so that status is not set as read-only when status is locally changed to Cancelled
                                         if (!(item.isStatusCancelledLocally && prop == 'status' && item.status == 'Cancelled')) {
                                             cellProperties.readOnly = true;
                                         }
                                     }
                                     //ankita starts canada changes
                                     if((item.status == '{!$Label.CRM_Status_Committed}' || ($scope.dealStageCommitted && item.status == '{!$Label.CRM_Status_Paid}' && !item.accruingTactic)) 
                                     && ((!committedStageFields.has(prop) && prop != 'approvedBy' && item.coopReason != 'Canada – POS Rebate') ||
                                     (!committedStageFieldsForCanada.has(prop) && prop != 'approvedBy' && item.coopReason == 'Canada – POS Rebate'))
                                     ){
                                         //The Start date, end date, comments, Co-op Reason/Tactic, POS Rebate, POS Actual, Co-op Actual Amount and Customer Reference
                                         console.log('Curr Prop ',prop);
                                         console.log('Inside Committed');
                                         cellProperties.readOnly = true;
                                     }else if(prop == 'posActual' && ((item.status == '{!$Label.CRM_Status_Committed}' && !item.isValidCreditNoteItemLinked) || ($scope.dealStageCommitted && item.status == '{!$Label.CRM_Status_Paid}' && !item.accruingTactic))){
                                          cellProperties.readOnly = false;
                                     }
                                     
                                     //for planned and revised and canada changes
                                     if( (item.status == '{!$Label.CRM_Status_Planned}' || (($scope.dealStagePlanned || $scope.dealStageRevised) && item.status == '{!$Label.CRM_Status_Paid}' 
                                     && !item.accruingTactic))  && prop != 'approvedBy'){
                                        //the start date, end date, co-op requested amount, comment, POS Rebate, POS Forecast, Co-op Reason, customer reference should all be editable  
                                        if( !plannedStageFields.has(prop) && item.coopReason != 'Canada – POS Rebate'){
                                            if(prop != 'posActual' && !$scope.isTFMUser){ // Defect : 4650 : TFM profile should be able to edit POS Actual field in all Deal Stages
                                                cellProperties.readOnly = true;
                                            }
                                        }if( !plannedStageFieldsForCanada.has(prop) && item.coopReason == 'Canada – POS Rebate' && item.status == '{!$Label.CRM_Status_Paid}' ){
                                            if(prop != 'posActual' && !$scope.isTFMUser){ // Defect : 4650 : TFM profile should be able to edit POS Actual field in all Deal Stages
                                                cellProperties.readOnly = true;
                                            }
                                        }
                                        
                                        
                                        if($scope.dealStagePlanned && ((prop == 'coopActualAmt' && !$scope.isTFMUser && item.coopReason != 'Canada – POS Rebate') || (prop == 'coopReqAmount' && item.coopReason == 'POS Rebate') || 
                                        (item.coopReason == 'Canada – POS Rebate' && (prop == 'coopReqAmount' || prop == 'posRebate' || prop == 'posForecast') && item.status == '{!$Label.CRM_Status_Paid}'))){
                                            cellProperties.readOnly = true;
                                        }else if($scope.dealStagePlanned && prop == 'coopReqAmount' && item.coopReason != 'POS Rebate'){
                                            if (!$scope.isTFMUser) {
                                                cellProperties.readOnly = false;
                                            } else {
                                                cellProperties.readOnly = true;
                                            }
                                        }
                                        
                                        if($scope.dealStageRevised && (item.coopActualAmt != item.coopReqAmount) && prop == 'coopReqAmount'){
                                            cellProperties.readOnly = true;
                                        }else if($scope.dealStageRevised && ((!$scope.isTFMUser && item.coopActualAmt == item.coopReqAmount) || $scope.isTFMUser)){
                                            if(!$scope.isTFMUser){
                                                if(item.coopReason == 'POS Rebate' && (prop == 'coopActualAmt' || prop == 'coopReqAmount')){
                                                    cellProperties.readOnly = true;
                                                }else if(item.coopReason != 'POS Rebate' && prop == 'coopActualAmt'){
                                                    cellProperties.readOnly = true;
                                                }
                                            }
                                            // For TFM user, Co-op Requested Amount field is always readonly
                                            else{
                                                if(prop == 'coopReqAmount'){
                                                    cellProperties.readOnly = true;
                                                }
                                            }
                                        }
                                    }
                                    
                                    //995
                                    if($scope.profileName != '{!$Label.CRM_ChannelMarketingUSGames}' && prop == 'approvedBy'){
                                        cellProperties.readOnly = true;
                                    }
                                    
                                    //DEF#4680 Ankita Make readonly fields slightly lighter on upload/extract 
                                    if(cellProperties.readOnly == true && prop != 'validation' && item.errorOccured == false && item.isRowRemoved == false){
                                         td.style.color = '#949494'; 
                                    } 
                                } 
                                if(cellProperties.change  && prop != 'validation') {
                                    $(cell).addClass('has-changed');
                                    item.isRowModified = true;
                                    item.isRowRemoved = false;
                                    item.previouslySelectedForRemoval=false;
                                }
                            }
                        }; 
                        
                        var nonAccruingTacticReasonsLabel = "{!$Label.CRM_Non_Accruing_Tactics}";
                        var nonAccruingTacticReasonsArray = nonAccruingTacticReasonsLabel.split(";"); 
                        
                        //Co-op Reason/Tactic drop down list
                        getSelectOptionsService(appConfig.apexController, 'OpportunityLineItem', 'Reason__c','').then(function(data) {
                            var dealData =[];
                            //ER-007552 - Added crmJvCoopReasons checking exclusion of SDS Coop-Reason
                            var crmJvCoopReasons = '{!$label.CRMJV_POS_DFI_Reason_PickList_Values}';
                            
                            angular.forEach(data, function(item, i) {
                             var str= item.label; 
                                 if(str  != 'Budget' && !str.includes('Advertising') && str != 'Space' && !crmJvCoopReasons.includes(str)){
                                    $scope.coopReasonOptions.push(str);
                                //  if( !str.includes('3rd Party Invoice Payment') && !str.includes('Digital – Site Promo') && !str.includes('Digital – WB Promo') && !str.includes('Digital Media Spend') && !str.includes('Canada – POS Rebate')){
                                    if(!nonAccruingTacticReasonsArray.includes(str)){    
                                        $scope.coopReasonOptionsForAccruingTactics.push(str);
                                    }else{
                                        $scope.coopReasonOptionsForNonAccruingTactics.push(str);
                                    }
                                }
                            }); 
                        });
                
                        // Displays the grid on load
                        $scope.GetLineItems = function(dealId){ 
                             $scope.showSpinner = true;
                             $scope.spinnerText = '{!$label.CRM_MultiOrder_spinnerText_Loading}';  
                             var prodRows;
                             
                            CRM_UploadExtractTradeTactics.getOpportunityLineItemTactics(dealId,function(result, event) {
                                if (event.status) {
                                    
                                    $.each(result, function( rowKey, accObject) {  
                                        if(accObject.startDate != null && accObject.startDate != undefined){
                                            accObject.startDate = convertDate(accObject.startDate); //Defect 4654
                                        }
                                        if(accObject.endDate != null && accObject.endDate != undefined){
                                            accObject.endDate = convertDate(accObject.endDate);  //Defect 4654
                                        }
                                        
                                        //Defect:4717
                                        $scope.updateNullFieldsValue(accObject);
                                        
                                        //US : 935
                                        var coopActualAmt = accObject.coopActualAmt ? accObject.coopActualAmt : 0;
                                        if(!mapOfVVToTotalCoopActualAmt.has(accObject.videoVersion)){
                                            mapOfVVToTotalCoopActualAmt.set(accObject.videoVersion,coopActualAmt);    
                                        }else{
                                            var tempAmt = mapOfVVToTotalCoopActualAmt.get(accObject.videoVersion) + coopActualAmt;
                                            mapOfVVToTotalCoopActualAmt.set(accObject.videoVersion,tempAmt);
                                        }
                                    });
                                    $scope.showSpinner = false;
                                    $scope.tacticData = result;
                                    $scope.nonProcessedRecrods = $scope.tacticData;
                                    hot.loadData($scope.tacticData); 
                                    $scope.$apply();
                                }
                            },{
                                escape: false, timeout: 120000
                            }); 
                        };
              
                        //US : 935
                        $scope.warningMessage = '';
                        
                        // Validates and saves the data changed on the grid
                        $scope.saveTactics = function(oppId,allowedToSaveData){
                            
                            var nonEmptyRowCount = (hot.countRows() - hot.countEmptyRows());
                            if(nonEmptyRowCount === 0){ nonEmptyRowCount = -1; }
                            var cleanedGridData = [];
                            
                            // Start ---------US : 994--------------------
                            if($scope.resultFilter.length > 0 && $scope.resultFilter[0].value == 'error'){
                                $scope.errorRecords = $scope.tacticData;
                            }else if($scope.resultFilter.length > 0 && $scope.resultFilter[0].value == 'success'){
                                $scope.sucessRecords = $scope.tacticData;
                            }else{
                                $scope.errorRecords = [];
                                $scope.sucessRecords = [];
                                $scope.nonProcessedRecrods = [];
                                $scope.nonProcessedRecrods = $scope.tacticData.slice(0,nonEmptyRowCount); 
                            }
                        
                            if($scope.errorRecords && $scope.errorRecords.length > 0)
                                cleanedGridData = cleanedGridData.concat($scope.errorRecords);
                            if($scope.sucessRecords && $scope.sucessRecords.length > 0)
                                cleanedGridData = cleanedGridData.concat($scope.sucessRecords);
                            if($scope.nonProcessedRecrods && $scope.nonProcessedRecrods.length > 0)
                                cleanedGridData = cleanedGridData.concat($scope.nonProcessedRecrods);
                            
                            console.log('cleanedGridData : ',cleanedGridData);
                            
                            $scope.msgText = '';
                            $scope.msgSeverity = '';
                            $scope.msgTextDialog = '';
                            $scope.msgSeverityDialog = '';
                            $scope.tacticLineItems = [];
                        
                            //US : 935
                            $scope.totalCoopActualAmount = 0;
                        
                            $.each(cleanedGridData, function(rowKey, accObject) { 
                                if(accObject.startDate != '' && accObject.startDate != null && accObject.startDate != undefined){
                                    accObject.startDate = new Date(accObject.startDate).toLocaleDateString($scope.UserLocal);
                                }else{
                                    accObject.startDate = null;
                                }
                                        
                                if(accObject.endDate != '' &&  accObject.endDate != null && accObject.endDate != undefined){
                                    accObject.endDate = new Date(accObject.endDate).toLocaleDateString($scope.UserLocal);
                                }else{
                                    accObject.endDate = null;
                                } 
                                        
                                if(typeof  accObject.posRebate != 'number'){
                                    accObject.posRebate = null;
                                }
                                if(typeof accObject.posForecast != 'number'){
                                    accObject.posForecast = null;
                                }
                                if(typeof accObject.coopReqAmount != 'number'){
                                    accObject.coopReqAmount = null;
                                }
                                if(typeof accObject.posActual != 'number'){
                                    accObject.posActual =null;
                                }
                                if(typeof accObject.coopActualAmt != 'number'){
                                    accObject.coopActualAmt = null;
                                }
                                accObject.validation = '';
                                //accObject.errorOccured = false;
                                //US : 935
                                $scope.totalCoopActualAmount += accObject.coopActualAmt;
                                
                            }); 
                            
                            //US : 935
                            if($scope.appConfig.isAutomaticDeal && ($scope.totalCoopActualAmount > $scope.appConfig.totalCoopBudget) && !allowedToSaveData){
                                $scope.mesList = '{!$Label.CRM_UploadExtractTactic_Warning_Message}'.split(',');
                                $scope.warningMessage = $scope.mesList[0]+$scope.totalCoopActualAmount+$scope.mesList[1]+$scope.appConfig.totalCoopBudget+$scope.mesList[2]+' {!JSENCODE(Opportunity.name)}';
                            }else{
                                allowedToSaveData = true;
                            }
                            
                            if(!$scope.appConfig.isAutomaticDeal || allowedToSaveData){ //US : 935
                                $scope.errorRecords = [];
                                $scope.sucessRecords = [];
                                $scope.nonProcessedRecrods = [];
                                $scope.showSpinner = true;
                                /**
                                 * rowsToProcess - Array of records to save back to salesforce
                                 * returnedResults - Rows already saved to Salesforce
                                 */
                                (function runSaveToSalesforce(rowsToProcess, returnedResults, failedRecCount) {
                                    
                                    if (typeof rowsToProcess == 'undefined' || rowsToProcess.length == 0) {
                                        $scope.showSpinner = false;
                                        return;
                                    }
    
                                    var chunkSize = {!ChunkSizeForTradeTactics}; // Recursive batch size
                                    chunkedData = rowsToProcess.splice(0, chunkSize); 
                                    
                                    // Call the controller class method which returns the list with validations
                                    CRM_UploadExtractTradeTactics.setOpportunityLineItemTactics(chunkedData,oppId , $scope.isTFMUser, function(result, event) {
                                        
                                        if (!event.status) {
                                            $scope.$apply(function() {
                                                $scope.msgText = event.message;
                                                $scope.msgSeverity = 'error';
                                                $scope.showSpinner = false;
                                            });
                                        }else if (cleanedGridData.length > 0) { 
                                            // If successful add results to the main array
                                            returnedResults = returnedResults.concat(result);

                                            var failedCount = (typeof result[0] == 'undefined' || typeof result[0].numFailedRecords == 'undefined') ? 0 : result[0].numFailedRecords;
                                            failedRecCount += failedCount;

                                            // Update progress text for user
                                            $scope.$apply(function() {
                                                $scope.spinnerText = returnedResults.length + ' / ' + (rowsToProcess.length + returnedResults.length);
                                            });
                                            
                                            //Format dates 
                                            $.each(returnedResults, function(rowKey, accObject) { 
                                                if(accObject.startDate && accObject.startDate != ''){
                                                    accObject.startDate = new Date(accObject.startDate).toLocaleDateString($scope.UserLocal);
                                                }
                                                if(accObject.endDate && accObject.endDate != ''){
                                                    accObject.endDate = new Date(accObject.endDate).toLocaleDateString($scope.UserLocal);    
                                                }
                                                
                                                //Defect:4717
                                                $scope.updateNullFieldsValue(accObject);
                                            }); 
                                            
                                            // Call salesforce again with remaining rows
                                            runSaveToSalesforce(rowsToProcess, returnedResults, failedRecCount);
                                        
                                        } else { 
                                            
                                            // US : 994
                                            $scope.tacticData = []; 
                                            $scope.sortObj.column = 0;
                                            $scope.sortObj.order = "none";
                                            
                                            //Format dates 
                                            $.each(returnedResults.concat(result), function(rowKey, accObject) { 
                                                if(accObject.startDate != '' && accObject.startDate != null && accObject.startDate != undefined){
                                                    accObject.startDate = new Date(accObject.startDate).toLocaleDateString($scope.UserLocal);
                                                }
                                                if(accObject.endDate != '' &&  accObject.endDate != null && accObject.endDate != undefined){
                                                    accObject.endDate = new Date(accObject.endDate).toLocaleDateString($scope.UserLocal);    
                                                }
                                                
                                                //Defect:4717
                                                $scope.updateNullFieldsValue(accObject);
                                                
                                                // US : 994
                                                if(accObject.recrodStatus == 'error'){
                                                    $scope.errorRecords.push(accObject);
                                                }else if(accObject.recrodStatus == 'success'){
                                                    $scope.sucessRecords.push(accObject);
                                                }else{
                                                    $scope.nonProcessedRecrods.push(accObject);
                                                }
                                            });
                                            
                                            // US : 994
                                            if($scope.resultFilter.length > 0 && ($scope.resultFilter[0].value == 'success' || $scope.resultFilter[0].value == 'error')){
                                                $scope.filterRecords(false);
                                            }else{
                                                $scope.tacticData = returnedResults.concat(result);
                                                hot.loadData($scope.tacticData);
                                                hot.getPlugin('filters').filter();
                                            }
                                            var failedCount = (typeof result[0] == 'undefined' || typeof result[0].numFailedRecords == 'undefined') ? 0 : result[0].numFailedRecords;
                                            failedRecCount += failedCount;
                                            
                                            if (failedRecCount > 0) {
                                                $scope.msgText = failedRecCount.toString() + " {!$Label.CRM_UploadExtract_Msg_SaveError}";
                                                $scope.msgSeverity = 'error';
                                            } else {
                                                $scope.msgText = "{!$Label.CRM_UploadExtract_Msg_SaveSuccess}";
                                                document.getElementById("quickSaveBtn").style.background ='white';
                                                document.getElementById("quickSaveBtn").style.color = 'rgb(0, 134, 222)';
                                                $scope.msgSeverity = 'success';
                                            }
                                            
                                            $scope.spinnerText = '';
                                            $scope.showSpinner = false;
                                            $timeout(setHeight,2);
                                            
                                            // Update UI
                                            $scope.$apply();
                                        }
                                    },{
                                        escape: false,
                                        timeout: 120000,
                                        buffer: false  
                                    })
                                })(cleanedGridData, [], 0);
                            }
                        };
               
                        $scope.BackToDeal = function(url) {
                            $scope.navigateToURL(url);
                        };
                        
                        $scope.navigateToURL = function(url) {
                            var isLightningExperienceOrSf1 = ((typeof sforce != 'undefined') && sforce && (!!sforce.one));

                            if ($scope.isLightningExperienceOrSf1){
                                sforce.one.navigateToURL(url);
                            }else{
                                document.location.href = url;
                            }
                        }; 
                        
                        
                        <!-------- Us 909 ------------>
                        //Changes for Quantity field
                        // Method to set error message and its severity to display on page
                        $scope.addPageMessage =  function(msg, sev) {
                            $scope.msgTextDialog = msg;
                            $scope.msgSeverityDialog = sev;
                        };
                            
                        $scope.addSearchProdFlag = false;
                        $scope.productList = [];
                        $scope.selectedTacticList = [];
                        $scope.showSpinnerForAddSearchProdScreen = false;
                        $scope.searchText;
                        $scope.showAndHideAddSearchProductScreen = function(flagToHideAndShowScreen){
                        
                            if(flagToHideAndShowScreen){
                                $scope.productList = [];
                                $scope.searchText = '';
                                $scope.addSearchProdFlag = true;
                                $scope.isMasterChecked = false;
                            }else{
                                $scope.addSearchProdFlag = false;
                            }
                        };
                        <!-- US#909 Add product on the grid-->
                        $scope.addProducts = function(){
                            var lastIndex = (hot.countRows() - hot.countEmptyRows());
                            $scope.selectedTacticList = [];
                            $scope.isMasterChecked = false;
                            $scope.selectedProductList = [];
                            //get selected Products
                            $.each($scope.productList, function(rowKey, productObj) { 
                               // productObj.product.quantityForProd
                                if(productObj.isSelected){
                                    if(productObj.product.quantityForProd > 0){
                                        $scope.addPageMessage('','');
                                        for(i=0;i<productObj.product.quantityForProd;i++){
                                            var tempObj = jQuery.extend(true, {}, productObj.dealProdWrap);
                                            $scope.selectedTacticList.push(tempObj); 
                                        }
                                        $scope.selectedProductList.push(productObj);
                                    }else{
                                       $scope.addPageMessage('{!$Label.CRM_Valid_Number}','error'); 
                                    }
                                }
                            });
                        
                            if($scope.selectedTacticList && $scope.selectedTacticList.length > 0){
                                
                                //Defect:4717
                                $.each($scope.selectedTacticList, function(rowKey, tactic) { 
                                    $scope.updateNullFieldsValue(tactic);
                                });
                                $scope.tacticData.splice.apply($scope.tacticData, [lastIndex, 0].concat($scope.selectedTacticList));
                                hot.updateSettings({minSpareRows: 0}); // US : 994
                                hot.loadData($scope.tacticData); 
                            }
                            
                            $.each($scope.selectedProductList, function(rowKey, productObj) {    
                                var index = $scope.productList.indexOf(productObj);
                                if (index > -1) {
                                    $scope.productList.splice(index, 1);
                                }
                            });
                        
                        };
                        
                        <!-------- Us 909 ------------>
                        $scope.searchProducts = function(){
                            $scope.showSpinner = true;
                            CRM_UploadExtractTradeTactics.getProductsForAddSearchProductScreen($scope.appConfig.priceBookId,$scope.searchText,$scope.appConfig.dealCurrency,
                                $scope.appConfig.accountName,$scope.startDate,$scope.closeDate,
                                function(result, event) {
                                    if (event.status) {
                                        $scope.productList = result;
                                        $scope.showSpinner = false;
                                        $scope.$apply();
                                    }
                                    //Added By Harshad for US 1014
                                    else {
                                        $scope.addPageMessage(event.message, 'error');
                                        
                                        $scope.showSpinner = false;
                                        $scope.$apply();
                                }
                                },{
                                    escape: false,
                                    timeout: 120000,
                                    buffer: false  
                                }
                            );
                        };
                        //Added By Harshad for US 1014
                        $scope.addPageMessage =  function(msg, sev) {
                            $scope.pageMsg = msg;
                            $scope.msgSeverity = sev;
                          };
                        
                        $scope.isMasterChecked = false;
                        $scope.checkUncheckAll = function() {
                            angular.forEach($scope.productList, function(item, i) {
                                item.isSelected = $scope.isMasterChecked;
                            });
                        };
                        <!-------- Us 909 ------------>
                        
                        function setHeight() {
                            $scope.height = (initalHeight - $("#msgDiv").height());
                            $("#tableDiv .ht_master .wtHolder").css("height",$scope.height);
                            $("#tableDiv").css("height",$scope.height);
                        }
                        
                        $scope.removeMsgBlock= function(){
                            $scope.msgText = '';
                            $scope.height = initalHeight;
                            $("#tableDiv .ht_master .wtHolder").css("height",$scope.height);
                            $("#tableDiv").css("height",$scope.height);
                        };
                        
                        <!-------- Us 935 ------------>
                        $scope.showAndHideWarningModel = function(allowedtoSaveData){
                            $scope.warningMessage = '';
                            if(allowedtoSaveData){
                                $scope.saveTactics('{!Opportunity.Id}',allowedtoSaveData);
                            }
                        };
                        
                        $scope.updateMapOFVVToCoopActualAmt = function(item,newValue,oldValue){
                            var newVal = 0;
                            var oldVal = 0;
                            
                            if(newValue){
                                newVal = parseFloat(newValue);
                            }
                            if(oldValue){
                                oldVal = parseFloat(oldValue);
                            }
                            var diffOfCoopActualAmt = (newVal - oldVal);
                            if(!mapOfVVToTotalCoopActualAmt.has(item.videoVersion)){
                                mapOfVVToTotalCoopActualAmt.set(item.videoVersion,diffOfCoopActualAmt);
                            }else{
                                var coopActualAmt = mapOfVVToTotalCoopActualAmt.get(item.videoVersion) + diffOfCoopActualAmt;
                                mapOfVVToTotalCoopActualAmt.set(item.videoVersion,coopActualAmt);
                            }
                        };
                        <!-------- Us 935 ------------>
                        
                        <!-----Defect:4717------------>
                        $scope.updateNullFieldsValue = function(tactic){
                            if(!tactic.posRebate){
                                tactic.posRebate = "";
                            }
                            
                            if(!tactic.posForecast){
                                tactic.posForecast = "";
                            }
                            
                            if(!tactic.coopReqAmount){
                                tactic.coopReqAmount = "";
                            }
                            
                            if(!tactic.posActual){
                                tactic.posActual = "";
                            }
                            
                            if(!tactic.coopActualAmt){
                                tactic.coopActualAmt = "";
                            }
                            
                            if(!tactic.coopComments){
                                tactic.coopComments = "";
                            }
                            
                            if(!tactic.custReference){
                                tactic.custReference = "";
                            }
                            
                            if(!tactic.digitalMembership){
                                tactic.digitalMembership = "";
                            }
                         };
                         
                          <!-------- Us 989 ------------>
                        $scope.refreshPage = function(){
                            window.location.reload(); 
                        }
                    
                        <!-------- Us 994 ------------>
                        $scope.filterRecords = function(falg){
                            hot.getPlugin('trimRows').untrimAll();
                            $scope.currentFilterValue = $scope.resultFilter[0] ? $scope.resultFilter[0].value : $scope.resultFilter[0];
                            if(($scope.previouslySelectedFilterValue != $scope.currentFilterValue && 
                               !((!$scope.previouslySelectedFilterValue && $scope.currentFilterValue == 'all') || 
                               (!$scope.currentFilterValue && $scope.previouslySelectedFilterValue == 'all'))) || !falg
                              ){
                                if(falg){
                                    if($scope.previouslySelectedFilterValue == 'error'){
                                        $scope.errorRecords = [];
                                        $.each($scope.tacticData, function(rowKey, dealProd) {  
                                             if(!hot.isEmptyRow(rowKey)){
                                                  $scope.errorRecords.push(dealProd);
                                             }
                                        });
                                    }else if($scope.previouslySelectedFilterValue == 'success'){
                                        $scope.sucessRecords = [];
                                        $.each($scope.tacticData, function(rowKey, dealProd) {  
                                             if(!hot.isEmptyRow(rowKey)){
                                                  $scope.sucessRecords.push(dealProd);
                                             }
                                        });
                                    }else{
                                         $scope.nonProcessedRecrods = [];
                                         $.each($scope.tacticData, function(rowKey, dealProd) {  
                                             if(!hot.isEmptyRow(rowKey) && dealProd.recrodStatus != 'error' && dealProd.recrodStatus != 'success'){
                                                  $scope.nonProcessedRecrods.push(dealProd);
                                             }
                                         });
                                    }
                                }
                                $scope.tacticData = [];
                                document.getElementById("addProductsBtn").disabled = false;
                                if($scope.resultFilter.length > 0 && ($scope.resultFilter[0].value == 'success' || $scope.resultFilter[0].value == 'error')){
                                    document.getElementById("addProductsBtn").disabled = true;
                                    if($scope.currentFilterValue == 'error'){
                                        $scope.tacticData =  $scope.errorRecords;
                                        hot.updateSettings({minSpareRows: 0});
                                    }else if($scope.currentFilterValue == 'success'){
                                        $scope.tacticData =  $scope.sucessRecords;
                                        hot.updateSettings({minSpareRows: 0});
                                    }
                                }else{
                                    if($scope.errorRecords && $scope.errorRecords.length > 0)
                                        $scope.concatArray($scope.errorRecords);
                                    if($scope.sucessRecords && $scope.sucessRecords.length > 0)
                                        $scope.concatArray($scope.sucessRecords);
                                    if($scope.nonProcessedRecrods && $scope.nonProcessedRecrods.length > 0)
                                        $scope.concatArray($scope.nonProcessedRecrods);
                                }
                                hot.loadData($scope.tacticData);
                                hot.getPlugin('columnSorting').sort($scope.sortObj.column,$scope.sortObj.order);
                                if($scope.filterdColIndex.length > 0 && falg){
                                    hot.getPlugin('filters').removeConditions($scope.filterdColIndex);
                                }
                                hot.getPlugin('filters').filter();  
                            }
                            $scope.previouslySelectedFilterValue = $scope.currentFilterValue;
                        };
                        
                        $scope.concatArray = function(items){
                            var lastIndex = $scope.tacticData.length > 0 ? ($scope.tacticData.length) : 0;
                            $scope.tempArray = $scope.tacticData.slice();
                            [].splice.apply($scope.tempArray, [lastIndex, 0].concat(items));
                            $scope.tacticData = $scope.tempArray;
                        };
                        
                        //Added For US : 989
                        $scope.exportCSVFile = function(){
                            hot.getPlugin('exportFile').downloadFile('csv', {
                                filename: appConfig.oppName+' {!$Label.CRM_Export_File_Label}',
                                columnHeaders: true       // default false, exports the column headers
                            });
                        };
                   }]
                );//end of angular class
            </script>
        </head>
        <body  style="padding:0px;">
            <div  xmlns:ng="http://angularjs.org" id="ng-app" ng-app="UploadTactics" ng-controller="UploadTacticsController" class="slds" ng-init="init()" ng-cloak="ngCloak">
    
                <!-- ===========================Spinner================================= -->   
                <div class="spinnerModel" ng-show="showSpinner">
                    <div class="spinnerContent slds-spinner--large">
                        <img src="{!URLFOR($Resource.SLDS0120, '/assets/images/spinners/slds_spinner_brand.gif')}" alt="{{spinnerText}}" />
                        <div id="spinnerText">{{spinnerText}}</div>
                    </div>
                </div>
                <!-- ===========================Spinner================================= -->  
                
                <!-- =========================== HEADER BANNER ================================-->     
                <div id="headerDiv" class="slds-page-header" role="banner">
                     <div class="slds-grid">
                        <div class="slds-col slds-has-flexi-truncate">
                            <nav class="slds-m-bottom--xx-small" role="navigation">
                                <p id="bread-crumb-label" class="slds-assistive-text">You are here:</p>
                                <ol class="slds-breadcrumb slds-list--horizontal" aria-labelledby="bread-crumb-label">
                                    <li class="slds-list__item slds-text-heading--label"><a href="{!URLFOR($Action.Opportunity.Tab, $ObjectType.Opportunity)}'">{!$ObjectType.Opportunity.labelPlural}</a></li>
                                    <li class="slds-list__item slds-text-heading--label"><a href="/{!Opportunity.Id}">{!Opportunity.Name}</a></li>
                                </ol>
                            </nav>
                            <div class="slds-col slds-has-flexi-truncate">
                                <h1 class="slds-float--left slds-text-heading--medium slds-truncate" title="{!$Label.CRM_Upload_UploadProducts}">{!$Label.CRM_Upload_UploadProducts}</h1>  
                            </div>
                        </div>
                        <!----------------------------US : 994------------------------->
                        <div class="slds-col slds-no-flex slds-align-bottom slds-form--inline">
                            <div class="slds-form-element" style="Width:80%">
                                <div class="slds-form-element__control picklistClass">
                                    <crm-multiselect-picklist options="resultFilterValues" selectedOpts="resultFilter" multiple="false" placeholder="{!$Label.CRM_Result_Filter_PlaceHolder}" ng-click="filterRecords(true)"/>
                                </div>
                            </div>
                        </div>
                        <c:CRM_SLDSPicklist />
                        <!----------------------------US : 994------------------------->
                        <div class="slds-col slds-no-flex slds-align-bottom slds-form--inline">
                            <div class="slds-form-element">
                                <div class="slds-form-element__control">
                                    <div class="slds-button-group slds-button-space-left" role="group">
                                         <!-- US 994 ------->
                                        <button class="slds-button slds-button--neutral" ng-click="refreshPage()">{!$Label.CRM_Reset_button_label}</button>
                                        <!-- US 994 ------->
                                        <!-- US 989 ------->
                                        <button class="slds-button slds-button--neutral" ng-click="exportCSVFile()">{!$Label.CRM_Export_File_Button_Label}</button>
                                        <!-- US 989 ------->
                                        <button id="addProductsBtn" ng-click="showAndHideAddSearchProductScreen(true)" class="slds-button slds-button--neutral" ng-disabled="(dealStagePlanned == false && dealStageRevised == false)">{!$Label.CRM_Add_Product_Label}</button>
                                        <button id="quickSaveBtn" ng-click="saveTactics('{!Opportunity.Id}',false)" class="slds-button slds-button--neutral">{!$Label.CRM_Quick_Save_Button_On_Add_Product_Page}</button>
                                        <button class="slds-button slds-button--neutral" ng-click="BackToDeal('{!URLFOR($Action.Opportunity.View,Id)}')">{!$Label.CRM_Approval_Button_Back_To_Deal}</button>
                                    </div>
                                </div>
                            </div>
                            <div class="slds-button-group" role="group"></div>
                        </div>
                    </div>
                </div>
                 
                 <!-- ===========================Exception=============================== -->
                <div Id="msgDiv" ng-show="msgText"  class="slds-grid">
                    <div class="slds-col slds-notify  slds-theme--{{msgSeverity}} slds-notify--toast slds-box--x-small slds-theme--alert-texture" role="alert">
                        <button class="slds-button slds-button--icon-inverse slds-notify__close slds-m-right--small" ng-click="removeMsgBlock()">
                            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--medium">
                                <use xlink:href="{!URLFOR($Resource.SLDS0120, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                            </svg>
                            <span class="slds-assistive-text">Close</span>
                        </button>
                        <div class="notify__content slds-grid" ng-show="msgText">
                            <svg aria-hidden="true" class="slds-col slds-icon slds-icon--small slds-m-right--small slds-no-flex" ng-show="msgSeverity == 'sucess'">
                                <use xlink:href="{!URLFOR($Resource.SLDS0120, '/assets/icons/utility-sprite/svg/symbols.svg#sucess')}"></use>
                            </svg>
                            <svg aria-hidden="true" class="slds-col slds-icon slds-icon--small slds-m-right--small slds-no-flex" ng-show="msgSeverity == 'error'">
                                <use xlink:href="{!URLFOR($Resource.SLDS0120, '/assets/icons/utility-sprite/svg/symbols.svg#error')}"></use>
                            </svg>
                            <svg aria-hidden="true" class="slds-col slds-icon slds-icon--small slds-m-right--small slds-no-flex" ng-show="msgSeverity == 'Info'">
                                <use xlink:href="{!URLFOR($Resource.SLDS0120, '/assets/icons/utility-sprite/svg/symbols.svg#info')}"></use>
                            </svg>
                            <div class="slds-col slds-align-middle">
                                <p class="slds-col slds-text-heading--small" style="font-size: 15px !important;">{{msgText}}</p>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ===========================Exception=============================== -->
            
                <!-- ===========================Add Search Products Pop-up=============================== -->
                <crm-add-search-products-view></crm-add-search-products-view>
                <!-- ===========================Add Search Products Pop-up=============================== -->
            
            
                <!-- ===========================Dynamic Div================================= -->
                <div id="tableDiv" style="margin: 3px 3px 0;"></div> <!-- style="overflow:auto; width:{{width}}px; height:{{height}}px;"></div> -->
                <c:CRM_AddSearchProductsForUploadExtract />
                
                <!-- Modal dialog for Co-op Requested Amount Start-->
                <div id="warningMessageDiv" ng-show="warningMessage">
                    <div aria-hidden="false" role="dialog" class="slds-modal slds-modal--large slds-fade-in-open">
                        <div class="slds-modal__container">
                             <div class="slds-modal__header">
                                <button class="slds-button slds-button--icon-inverse slds-modal__close" ng-click="showAndHideWarningModel(false)">
                                    <svg aria-hidden="true" class="slds-button__icon slds-button__icon--large">
                                        <use xlink:href="{{appConfig.resourceSlds+'/assets/icons/action-sprite/svg/symbols.svg#close'}}"></use>
                                    </svg>
                                    <span class="slds-assistive-text">Close</span>
                                </button>
                             </div>
                            <div class="slds-modal__content">
                                <div class="slds-grid slds-form--stacked slds-m-bottom--x-small">
                                    <svg aria-hidden="true" class="slds-col slds-icon slds-icon--small slds-m-right--small slds-no-flex" style="fill: #706e6b;">
                                        <use xlink:href="{!URLFOR($Resource.SLDS0120, '/assets/icons/utility-sprite/svg/symbols.svg#warning')}"></use>
                                    </svg>
                                    <span class="slds-col">{{warningMessage}}</span>
                                </div>
                            </div>
                            <div class="slds-modal__footer">
                                <button class="slds-button slds-button--neutral slds-button--brand" ng-click="showAndHideWarningModel(true)">{!$Label.CRM_UploadExtractTactic_Warning_OK_Button}</button>
                            </div>
                        </div>
                    </div>
                    <div class="slds-modal-backdrop slds-modal-backdrop--open"></div>
                </div>
                <!-- Modal dialog for Co-op Requested Amount End-->
            </div>
        </body> 
    </html>
</apex:page>