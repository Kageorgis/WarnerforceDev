<apex:page controller="WB_EAD_Grid_Controller" showHeader="false" sidebar="false" applyHtmlTag="true" applyBodyTag="true">
    <html xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" charset="utf8" >
        <head>
            <meta http-equiv="x-ua-compatible" content="ie=edge"></meta>
            <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no"></meta>
            
            <apex:includeScript value="{!URLFOR($Resource.WB_Resource_Library, 'js/jquery.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'handsontable.full.min.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'handsontable.full.js')}"/>
            
            <apex:stylesheet value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'handsontable.full.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'handsontable.full.min.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'handsontable.css')}"/>
            <apex:stylesheet value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'handsontable.min.css')}"/>
            
            <apex:stylesheet value="{!URLFOR($Resource.SLDS0120, 'assets/styles/salesforce-lightning-design-system-vf.css')}" />
            <apex:stylesheet value="{!URLFOR($Resource.CRM_DealProductFileUpload, 'CRM_DealProductFileUpload/css/main.css')}" />
            
            <apex:includeScript value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'languages/all.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'numbro/languages.js')}"/>
            <apex:includeScript value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'numbro/numbro.js')}"/>
            
            <apex:includeScript value="{!URLFOR($Resource.CRM_HandsonTable_Pro_Library, 'moment/moment.js')}"/>
            
            <apex:includeScript value="{!URLFOR($Resource.WB_Resource_Library, 'js/angular.min.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.WB_Resource_Library, 'js/crm-components.js')}" />
            <apex:includeScript value="{!URLFOR($Resource.WB_Resource_Library, 'js/svgxuse.js')}" /> 
            
            <script src="/soap/ajax/35.0/connection.js" type="text/javascript"></script>
            <script src="/soap/ajax/35.0/apex.js" type="text/javascript"></script>
            <apex:includeScript value="{!URLFOR($Resource.CRM_Dynamic_Locale)}/js/locale/angular-locale_{!userLocaleLowerCase}.js"/>
            
            <style>
                .wordWrapClass {
                    text-overflow: ellipsis;
                    white-space: nowrap !important;
                    max-width: 20px;    
                }
                .slds .slds-notify--toast {
                    margin: 8px 8px 5px;   
                }
                .handsontable thead th {
                    background-color: #4F6A92 !important;
                    color: white !important;
                }
                .slds .slds-page-header{
                    padding: 11px !important;
                }
                .picklistClass .slds-button,.buttonGroupheight{
                    height: 31px;
                }
                .picklistClass span:first-of-type{
                    color:#636875 !important;
                    line-height: initial;
                }
                .picklistClass span:nth-child(2),.picklistClass span:nth-child(3){
                    line-height: initial;
                }
                html body.sfdcBody{
                    padding:0px;
                }
                .slds-lookup{
                    width: 240px;
                }
                .slds-pill__container, #lookup{
                    min-height:31px !important;
                    height:31px;
                }
                .slds .slds-pill{
                    height: 27px !important;
                    line-height: 1.25 !important;  
                    padding-left: 14px;
                }
                .slds .slds-lookup__item > a, .slds .slds-dropdown__item > a{
                    padding: 6px 0px 6px 12px !important;
                }
                #spinnerText{
                    font-size: 18px;
                }
                /*ER-002186*/
                .handsontable thead th {
                    background-color: #4F6A92 !important;
                    color: white !important;
                }
                .handsontableInputHolder .handsontableInput{
                    background-color: white !important;
                }
            </style>
            
            <script type="text/javascript"> 
               
               sforce.connection.sessionId = '{!$Api.Session_ID}';
               
                /* Pass a few dynamic parameters */
                angular.module("appConfig", [])
                    .service("appConfig", function() {
                         return {
                            userLocal: '{!UserLocale}',
                            userDateFormat: '{!UserDateFormat}',
                            pickWrapJSONString: '{!pickWrapJSONString}',
                            EADEditAccess: {!EADEditAccess},
                            handsontableProLicenseKey: '{!HandsonTable_Pro_Licencekey}',//ER-002186 - handsontable PRO version
                            resourceSlds: '{!URLFOR($Resource.SLDS0120)}'.replace('?isdtp=p1', '')
                         };
                     });
                 
                angular.module("UploadEADRecords", ['appConfig', 'crm-components','ngLocale'])
                    .controller("UploadEADController", ['$scope', '$timeout', 'appConfig','$locale', function($scope, $timeout, appConfig, $locale) {   
                        
                        var handsonLocale = new Set(['bg','cs-CZ','da-DK','de-AT','de-CH','de-DE','de-LI','el','en-AU','en-GB','en-IE','en-NZ','en-US','en-ZA',
                                                     'es-AR','es-CL','es-CO','es-CR','es-ES','es-MX','es-NI','es-PE','es-PR','es-SV','et-EE','fa-IR','fi-FI',
                                                     'fil-PH','fr-CA','fr-CH','fr-FR','he-IL','hu-HU','id','it-CH','it-IT','ja-JP','ko-KR','lv-LV','nb','nb-NO',
                                                     'nl-BE','nl-NL','nn','pl-PL','pt-BR','pt-PT','ro-RO','ru-RU','ru-UA','sk-SK','sl','sr-Cyrl-RS','sv-SE','th-TH',
                                                     'tr-TR','uk-UA','zh-CN','zh-MO','zh-SG','zh-TW']);

                        $scope.showSpinner = false;
                        $scope.appConfig = appConfig;
                        $scope.earliestAvailDates = [];
                        $scope.itemsBackup = [];
                        $scope.picklistWrap = angular.fromJson(appConfig.pickWrapJSONString);
                        console.log('userLocal -----------',appConfig.userLocal);
                        console.log('userDateFormat -----------',appConfig.userDateFormat);
                        //Invalid Value Checker Set
                        var invalidValueSet = new Set();
                        invalidValueSet.add("");
                        invalidValueSet.add(null);
                        invalidValueSet.add(undefined);
                        
                        //Picklist Values
                        $scope.resultFilterValues = [{label:"All", value:"all"},{label:"Error",value:"error"},{label:"Success",value:"success"}];
						$scope.WBTerritoryValues = $scope.picklistWrap.WBTerritoryValues.picklist;
						$scope.countryList = $scope.picklistWrap.countryValues.picklist;
						$scope.statusList = $scope.picklistWrap.statusValues.picklist;
                        $scope.channelList = $scope.picklistWrap.channelValues.picklist;
                        $scope.formatList = $scope.picklistWrap.formatValues.picklist;
                        $scope.sortObj = {column:0,order:"none"};
                        $scope.countryName;
                        $scope.UserLocal = $scope.appConfig.userLocal; 
                        $scope.UserDateFormat = $scope.appConfig.userDateFormat;
                        $scope.UserDateFormatInUpperCase = $scope.UserDateFormat.toUpperCase();
                        
                        $scope.filter = {
                            EADVideoVersion: null,
                            EADMPM: null,
                            EADTitle: null,
                            countryName : '',
                            EADChannel: [],
                            EADSource: [],
                            EADFormats: [],
                            WBTerritory: []
                        };
                        
                        <!-------- Date Conversion Logic------->
                        function convertDate(dateVal) {
                            $scope.DateObj = new Date(dateVal);
                            $scope.totalMinute = ($scope.DateObj.getMinutes() + $scope.DateObj.getTimezoneOffset());
                            $scope.DateObj.setMinutes($scope.totalMinute);
                            $scope.DateObj = moment($scope.DateObj.toLocaleDateString($scope.UserLocal),$scope.UserDateFormatInUpperCase);
                            return $scope.DateObj.format($scope.UserDateFormatInUpperCase);
                        };   
                        <!-------- Date Conversion Logic------->
                        
                        var initalHeight = ($(window).height() - $('#headerDiv').height());
                        $scope.height = initalHeight;
                        
                        var initalWidth = $(window).width();
                        $scope.width = initalWidth;
                        
                        var container = document.getElementById('tableDiv');
                        var hot = new Handsontable(container,
                        {
                            data: $scope.earliestAvailDates,
                            colHeaders: true,
                            height: $scope.height,
                            trimDropdown: false,
                            columnSorting: true,
                            colHeaders: [
								'{!$ObjectType.Earliest_Avail_Date__c.fields.Title__c.Label} ',
								'{!$ObjectType.Earliest_Avail_Date__c.fields.Video_Version__c.Label} *',
								'{!$ObjectType.Earliest_Avail_Date__c.fields.Country__c.Label} *',
								'{!$ObjectType.Earliest_Avail_Date__c.fields.Channel__c.Label} *',
								'{!$ObjectType.Earliest_Avail_Date__c.fields.Format__c.Label} *',
								'{!$ObjectType.Earliest_Avail_Date__c.fields.Earliest_Avail_Date__c.Label}',
								'{!$ObjectType.Earliest_Avail_Date__c.fields.Status__c.Label} *',
								'{!$ObjectType.Earliest_Avail_Date__c.fields.Source__c.Label}',
								'{!$ObjectType.Country__c.fields.Territory__c.Label}',
								'{!$ObjectType.Earliest_Avail_Date__c.fields.MPM__c.Label}',
								'{!$ObjectType.Earliest_Avail_Date__c.fields.Name.Label}',
								'{!$Label.CRM_Upload_Field_Validation}'
							], 
                            columns: [
								{ data: 'title',type: 'text',readOnly: true},
								{ data: 'videoVersion',type: 'text'},
								{ data: 'country', type: 'dropdown',source: $scope.countryList},
								{ data: 'channel',type: 'dropdown',source: $scope.channelList},
								{ data: 'format',type: 'dropdown',source: $scope.formatList},
								{
								    data: 'earliestAvailDate',
                                    type: 'date',
                                    dateFormat: $scope.UserDateFormatInUpperCase,
                                    correctFormat: true,
                                    datePickerConfig: {
                                        firstDay: 0,
                                        showWeekNumber: true, 
                                        numberOfMonths: 1,
                                        i18n: {
                                            months        : $locale.DATETIME_FORMATS.MONTH,
                                            weekdays      : $locale.DATETIME_FORMATS.DAY,
                                            weekdaysShort : $locale.DATETIME_FORMATS.SHORTDAY
                                        }
                                    }
                                },
                                { data: 'status',type: 'dropdown',source: $scope.statusList},
                                { data: 'source',type: 'text', readOnly: true},
								{ data: 'WBTerritory',type: 'text', readOnly: true},
								{ data: 'MPM',type: 'text', readOnly: true},
								{ data: 'name',type: 'text',editor: 'maxlength' , maxLength : 255,readOnly: true},
								{ data: 'validation',type: 'text', readOnly: true}
							], 
                            cells: function(row, col, prop) {
                                var cellProperties = {};
                                cellProperties.renderer = $scope.myRenderer;
                                return cellProperties;
                            }, 
                            afterChange: function(changes, source) {
                                var ele = this;
                                $scope.date = new Date();
                                $scope.isDateChanged = false;
                                if (changes && changes.length > 0) {
                                    $.each(changes, function(index, element) {
                                        if (element) {
                                            var elem = ele.getCellMeta(element[0], ele.propToCol(element[1]));
                                            var actualRowIdex = changes[index][0];
                                            var prop = changes[index][1];
                                            var oldValue = changes[index][2];
                                            var newValue = changes[index][3];
                                            if ($scope.earliestAvailDates && changes[index][2] != changes[index][3] && prop != 'validation') {
                                                //ER-002186 :added for PRO
                                                var  item;// = $scope.tableOptions.items[ele.toPhysicalRow(changes[index][0])];
												if(ele.sortIndex && ele.sortIndex[actualRowIdex] && ele.sortOrder != undefined){
													item = $scope.earliestAvailDates[ele.sortIndex[actualRowIdex][0]];
												}else{
													item = $scope.earliestAvailDates[actualRowIdex];
												}
												
											    if(item){
											        
											        if(!(!oldValue && newValue == "")){
                                                        if(appConfig.EADEditAccess){
                                                            console.log('Inside the enable save button block');
												            document.getElementById("quickSaveBtn").disabled = false;
												            document.getElementById("quickSaveBtn").style.background ='#c23934';
												            document.getElementById("quickSaveBtn").style.color = 'white';
												        }
												        item.isRowModified = true;
    												}
											    }
                                            }
                                        }
                                    });
                                    
                                    var currentEle = this;
                                    if((source === 'edit' || source === 'loadData ' || source === 'Autofill.fill' || source === 'CopyPaste.paste') && $scope.isDateChanged){
								        currentEle.render();
								    }
                                }
                            },
                            minSpareRows: 5, 
                            //ER-002186 :added code for column filters 
                            dropdownMenu: ['clear_column','alignment','filter_by_condition','filter_operators','filter_by_condition2','filter_by_value','filter_action_bar'],
                            filters: true,
                            licenseKey: appConfig.handsontableProLicenseKey,
                            afterColumnSort: function(column,order){
                                $scope.sortObj.column = column;
                                $scope.sortObj.order = order;
                            },
                            afterLoadData: function(firstTime){
                                if(hot){
                                    console.log('---fire afterLoadData');
                                    hot.updateSettings({minSpareRows: 5});
                                }
                            },
                            //ER-002186 :end of code for column filter 
							 
							stretchH: 'all',
							copyPaste: {
                              columnsLimit: 100,
                              rowsLimit: 5000
                            },
							manualColumnResize: true
                        });
                        
                        (function (Handsontable) {

                            'use strict';
                            
                            var MaxLengthEditor = Handsontable.editors.TextEditor.prototype.extend();
                            
                            MaxLengthEditor.prototype.prepare = function () {
                                Handsontable.editors.TextEditor.prototype.prepare.apply(this, arguments);
                                this.TEXTAREA.maxLength = this.cellProperties.maxLength;
                            };
                            
                            Handsontable.editors.registerEditor('maxlength', MaxLengthEditor);
                        
                        })(Handsontable);
                        
                        $scope.myRenderer = function(instance, td, row, col, prop, value, cellProperties) {
                            
                            if(cellProperties.type == 'text'){
                            	Handsontable.renderers.TextRenderer.apply(this, arguments);
                            }else if(cellProperties.type == 'numeric'){
                                Handsontable.renderers.NumericRenderer.apply(this, arguments);
                            }else if(cellProperties.type == 'date'){
                                Handsontable.renderers.DateRenderer.apply(this, arguments);
                            }else if(cellProperties.type == 'dropdown'){
                                Handsontable.renderers.DropdownRenderer.apply(this, arguments);
                            }
                            
                            //Added to truncate comments Column value
							if(prop == 'comments'){
                                $(td).addClass("wordWrapClass");
                            }
                            
                            if($scope.earliestAvailDates){
                                var realIndex = row;
								if(cellProperties.instance.sortIndex && cellProperties.instance.sortOrder != undefined && cellProperties.instance.sortIndex[row]){
									realIndex = cellProperties.instance.sortIndex[row][0];
								} 
								var item = $scope.earliestAvailDates[realIndex];
								if(item){
								    if(prop == 'name' && value) {
                                        $(td).html('<a href="/' + item.existingId + '" target="_blank">' + item.name + '</a>');
                                    }
								    if(item.existingId && (prop == 'videoVersion' || prop == 'country' || prop == 'format' || prop == 'channel' || prop == 'name' || prop == 'title')){
    								    cellProperties.readOnly = true;
    								    td.style.color = '#777';
    								}
    								
    								if(item.errorOccured  && item.errorOccured == true){
    									td.style.backgroundColor = 'red';
    									td.style.color = 'white';
    								}else{
    								    
        								if(item.existingId && (prop == 'channel' || prop == 'format')){
        								    if(item.invalidCapability){
    								            td.style.backgroundColor = '#e7b439';
        								        td.style.color = 'black';
        								        td.title = '{!$Label.WB_EAD_Invalid_Capability_Msg}';
        								    }else{
        								        td.style.backgroundColor = 'white';
        								        td.title = '';
        								    }
        								}
    								}
    							}
                            }
                        };
                        
                        //Download the header template
                        //ER-002186 - added for PRO version to download CSV with header
                        $scope.exportCSVFile = function(){
                            hot.getPlugin('exportFile').downloadFile('csv', {
                                filename: 'EAD Download',
                                columnHeaders: true       // default false, exports the column headers
                            });
                        };
                        
                        function getKeys(obj) {
                          var all = {};
                          var seen = [];
                          checkValue(obj, all, seen);
                          return Object.keys(all);
                        }
                        
                        function checkValue(value, all, seen) {
                          if (Array.isArray(value)) return checkArray(value, all, seen);
                          if (value instanceof Object) return checkObject(value, all, seen);
                        }
                        function checkArray(array, all, seen) {
                          if (seen.indexOf(array) >= 0) return;
                          seen.push(array);
                          for (var i = 0, l = array.length; i < l; i++) {
                            checkValue(array[i], all, seen);
                          }
                        }
                        function checkObject(obj, all, seen) {
                          if (seen.indexOf(obj) >= 0) return;
                          seen.push(obj);
                          var keys = Object.keys(obj);
                          for (var i = 0, l = keys.length; i < l; i++) {
                            var key = keys[i];
                            all[key] = true;
                            checkValue(obj[key], all, seen);
                          }
                        }
                        
                        //reset all the filters and reload the page
                        $scope.resetFilters = function(){
                            $scope.showSpinner = true;
                            document.location.reload();
                        };
                        
                        //Filter the result set to Success,error and all records on the page after save.
                        $scope.filterRecords = function(itemsBackup){
                            if($scope.resultFilter != null && $scope.resultFilter !='' && $scope.resultFilter != 'undefined'){
                                //console.log('Inside function',$scope.resultFilter[0].value);
                                filteredItems = [];
                                $scope.earliestAvailDates = itemsBackup;
                                //console.log('$scope.earliestAvailDates inside filter ----',$scope.itemsBackup);
                                if($scope.resultFilter[0].value == 'error'){
                                    for(index=0;index<$scope.itemsBackup.length;index++){
                                        item = $scope.itemsBackup[index]; 
                                        if(item.validation != null && item.validation !='' && item.validation != 'Success' && item.validation != 'Updated')
                                            filteredItems.push(item);
                                    }
                                    $scope.earliestAvailDates = filteredItems;
                                    hot.loadData($scope.earliestAvailDates);
                                }else if($scope.resultFilter[0].value == 'success'){
                                    for(index=0;index<$scope.itemsBackup.length;index++){
                                        item = $scope.itemsBackup[index]; 
                                        if((item.validation == 'Success' || item.validation == 'Updated') && item.validation != 'Validation')
                                            filteredItems.push(item);
                                    }
                                    
                                    $scope.earliestAvailDates = filteredItems;
                                    hot.loadData($scope.earliestAvailDates);
                                }else{
                                	$scope.earliestAvailDates  = $scope.itemsBackup;
                                	hot.loadData($scope.earliestAvailDates);
                                }
                            }
                        };
                        
                        //get and load the data on table based on filters
                        $scope.GetEarliestAvailDateRecords = function(){
                            document.getElementById("quickSaveBtn").style.background ='white';
                            document.getElementById("quickSaveBtn").style.color = '#d8dde6';
                            document.getElementById("quickSaveBtn").disabled = true;
                           //console.log('$scope.filter -----------',$scope.filter);
                           if($scope.filter.EADVideoVersion == ''){
                               $scope.filter.EADVideoVersion = null;
                           }
                           if($scope.filter.EADMPM == ''){
                               $scope.filter.EADMPM =null;
                           }if($scope.filter.EADTitle == ''){
                               $scope.filter.EADTitle =null;
                           }
                           if(invalidValueSet.has($scope.filter.EADVideoVersion) && invalidValueSet.has($scope.filter.EADMPM) && invalidValueSet.has($scope.filter.EADTitle) && invalidValueSet.has($scope.filter.countryName) && $scope.filter.WBTerritory.length === 0 && 
                                $scope.filter.EADChannel.length === 0 && $scope.filter.EADFormats.length === 0 && $scope.filter.EADSource.length === 0
                            ){
                                $scope.msgText = '{!$label.WB_SearchError}';
                                $scope.msgSeverity = 'error';
								$scope.showSpinner = false;
								$scope.earliestAvailDates = [];
								hot.loadData($scope.earliestAvailDates);
                                $timeout(setHeight,2);
                                
                            }else{
                                $scope.msgText=null;
                                $scope.showSpinner = true;
                                $scope.spinnerText = '{!$label.WB_EAD_spinnerText_Loading}';
                                
                                WB_EAD_Grid_Controller.getEADRecords($scope.filter,function(result, event) {  
                                     
                                     if(!event.status){
                                        $scope.$apply(function() {
                                            $scope.msgText = event.message;
                                            $scope.msgSeverity = 'error';
                                            $scope.showSpinner = false;
                                        });
                                     }else{
                                        //console.log('result -----> ',result);
                                        $.each(result, function( rowKey, EADObj) {  
                                            if(EADObj.earliestAvailDate != null && EADObj.earliestAvailDate != undefined){
                                                EADObj.earliestAvailDate = convertDate(EADObj.earliestAvailDate);
                                            }
                                             
                                        });
                                        
                                        if(!invalidValueSet.has(typeof result[0]) && !invalidValueSet.has(result[0].maxLimitExceededMsg) && result[0].maxLimitExceededMsg){
                                            $scope.msgText = result[0].maxLimitExceededMsg;
                                            $scope.msgSeverity = 'Info';
                                            $scope.showSpinner = false;
                                            $timeout(setHeight,2);
                                        }
                                     }
                                     $scope.earliestAvailDates = result;
                                     $scope.itemsBackup = result;
                                     hot.updateSettings({minSpareRows: 0});
                                     hot.loadData($scope.earliestAvailDates); 
                                     $scope.showSpinner = false;
                                     $scope.$apply();
                                },{
                                    escape: false, timeout: 120000
                                });
                            }
                        };
                        
                        //Save changes on table to server
                        $scope.SaveRecords = function(){
                            
                            var saveStartTime = new Date();
							var timeDiff = 0;
							
                            $scope.msgText = '';
							$scope.msgSeverity = '';
							$scope.showSpinner = true;
							$scope.spinnerText = '{!$label.WB_EAD_spinnerText_Processing}';
							
							$scope.chunkSize = {!ChunkSizeForEADRecords}; // Recursive batch size
							$scope.nonEmptyRowCount = (hot.countRows() - hot.countEmptyRows());
							if($scope.nonEmptyRowCount === 0){ $scope.nonEmptyRowCount = -1; }
							$scope.failedRecCount = 0;
							$scope.filteredGridData = $scope.earliestAvailDates.slice(0,$scope.nonEmptyRowCount);
							
							upperCaseChannelList = $scope.channelList.map(function(value) {
                                return value.toUpperCase();
                            });
                            upperCaseCountryList = $scope.countryList.map(function(value) {
                                return value.toUpperCase();
                            });
                            upperCaseStatusList = $scope.statusList.map(function(value) {
                                return value.toUpperCase();
                            });
                            upperCaseFormatList = $scope.formatList.map(function(value) {
                                return value.toUpperCase();
                            });
							
							var chunkTime = new Date();
                            //console.log('Time Elapsed for chunk is Validation Last : ', (chunkTime - saveStartTime)+'---'+(((chunkTime - saveStartTime)-timeDiff)/1000));
                                    
                            $.each($scope.filteredGridData, function(rowKey, eadObj) { 
							    $scope.spinnerText = '{!$label.WB_EAD_spinnerText_Processing}';
							    if(eadObj.isRowModified){
							        var validationMsg = $scope.validateRcRecord(eadObj);
    							    if(validationMsg){
    						            $scope.failedRecCount++;
    						            eadObj.errorOccured = true;
    						            eadObj.validation = validationMsg;
    						        }else{
    						            eadObj.errorOccured = false;
    						            eadObj.validation = '';
    						        }    
							    }else{
							        eadObj.errorOccured = false;
						            eadObj.validation = '';
						        }
							});
							
							var chunkTime = new Date();
                            //console.log('Time Elapsed for chunk is Validation Last : ', (chunkTime - saveStartTime)+'---'+(((chunkTime - saveStartTime)-timeDiff)/1000));
                            //console.log('$scope.filteredGridData : ',$scope.failedRecCount,'-------------',$scope.filteredGridData);
                            
                            if ($scope.failedRecCount > 0) {
                                $scope.msgText = $scope.failedRecCount.toString() + " {!$Label.WB_EAD_Msg_SaveError}";
                                $scope.msgSeverity = 'error';
                                $scope.earliestAvailDates = $scope.filteredGridData;
							    hot.loadData($scope.earliestAvailDates); 
							    $scope.showSpinner = false;
							    $scope.spinnerText = '';
							    $timeout(setHeight,2);
                            }else if($scope.failedRecCount == 0 && $scope.filteredGridData.length > 0){
							    /**
                                 * rowsToProcess - Array of records to save back to salesforce
                                 * returnedResults - Rows already saved to Salesforce
                                */
                                (function runSaveToSalesforce(rowsToProcess, returnedResults, failedRecCount) {
                                    chunkedData = rowsToProcess.splice(0, $scope.chunkSize); 
                                    
                                    $.each(chunkedData, function(rowKey, EADObj) { 
                                        if(invalidValueSet.has(EADObj.earliestAvailDate)){
                                            //console.log('Null the date',EADObj.earliestAvailDate);
                                            EADObj.earliestAvailDate = null;
                                        } 
                                        if(EADObj.videoVersion != null && EADObj.videoVersion!='undefined'){
                                            EADObj.videoVersion = EADObj.videoVersion.trim();
                                        }
                                        if(EADObj.status != null && EADObj.status!='undefined' && upperCaseStatusList.indexOf((EADObj.status.trim()).toUpperCase()) != -1){
                                           var index = upperCaseStatusList.indexOf((EADObj.status.trim()).toUpperCase());
                                           EADObj.status =  ($scope.statusList)[index]; 
                                        }
                                        if(EADObj.country != null && EADObj.country!='undefined' && upperCaseCountryList.indexOf((EADObj.country.trim()).toUpperCase()) != -1){
                                           var index = upperCaseCountryList.indexOf((EADObj.country.trim()).toUpperCase());
                                           EADObj.country =  ($scope.countryList)[index];
                                        }
                                        if(EADObj.format != null && EADObj.format!='undefined' && upperCaseFormatList.indexOf((EADObj.format.trim()).toUpperCase()) != -1){
                                           var index = upperCaseFormatList.indexOf((EADObj.format.trim()).toUpperCase());
                                           EADObj.format =  ($scope.formatList)[index];
                                        }
                                        if(EADObj.channel != null && EADObj.channel!='undefined' && upperCaseChannelList.indexOf((EADObj.channel.trim()).toUpperCase()) != -1){
                                           var index = upperCaseChannelList.indexOf((EADObj.channel.trim()).toUpperCase());
                                           EADObj.channel =  ($scope.channelList)[index];
                                        }
                                    });
                                    
                                    //console.log('$scope.filteredGridData.length ----------',$scope.filteredGridData.length);
                                    
                                    WB_EAD_Grid_Controller.setEADRecords(chunkedData,function(result, event){
                                        //console.log('chunkedData -------------',chunkedData);
                                        if (!event.status) {
                                            $scope.$apply(function() {
                                                $scope.msgText = event.message;
                                                $scope.msgSeverity = 'error';
                                                $scope.showSpinner = false;
                                                $timeout(setHeight,2);
                                            });
                                            
                                        }else if ($scope.filteredGridData.length > 0) { 
                                            // If successful add results to the main array
                                            returnedResults = returnedResults.concat(result);
                                            //console.log('returnedResults ------------',returnedResults);
                                            var failedCount = (typeof result[0] == 'undefined' || typeof result[0].numFailedRecords == 'undefined') ? 0 : result[0].numFailedRecords;
                                            failedRecCount += failedCount;

                                            // Update progress text for user
                                            $scope.$apply(function() {
                                                $scope.spinnerText = returnedResults.length + ' / ' + (rowsToProcess.length + returnedResults.length);
                                            });
                                            
                                            var chunkTime = new Date();
                                            //console.log('Time Elapsed for chunk is Controller Last : ', (chunkTime - saveStartTime)+'---'+(((chunkTime - saveStartTime)-timeDiff)/1000));
                                    
                                            // Call salesforce again with remaining rows
                                            runSaveToSalesforce(rowsToProcess, returnedResults, failedRecCount);
                                        }else{
                                            $scope.earliestAvailDates = returnedResults.concat(result);
                                            $scope.itemsBackup = $scope.earliestAvailDates;
                                            $.each($scope.earliestAvailDates, function(EADObj) {
                                                if(EADObj.status != null && EADObj.status!='undefined' && upperCaseStatusList.indexOf((EADObj.status).toUpperCase()) != -1){
                                                   var index = upperCaseStatusList.indexOf((EADObj.status).toUpperCase());
                                                   EADObj.status =  ($scope.statusList)[index]; 
                                                }
                                                if(EADObj.country != null && EADObj.country!='undefined' && upperCaseCountryList.indexOf((EADObj.country).toUpperCase()) != -1){
                                                   var index = upperCaseCountryList.indexOf((EADObj.country).toUpperCase());
                                                   EADObj.country =  ($scope.countryList)[index];
                                                }
                                                if(EADObj.format != null && EADObj.format!='undefined' && upperCaseFormatList.indexOf((EADObj.format).toUpperCase()) != -1){
                                                   var index = upperCaseFormatList.indexOf((EADObj.format).toUpperCase());
                                                   EADObj.format =  ($scope.formatList)[index];
                                                }
                                                if(EADObj.channel != null && EADObj.channel!='undefined' && upperCaseChannelList.indexOf((EADObj.channel).toUpperCase()) != -1){
                                                   var index = upperCaseChannelList.indexOf((EADObj.channel).toUpperCase());
                                                   EADObj.channel =  ($scope.channelList)[index];
                                                }
                                            });
                                            if($scope.resultFilter != null){
                                                $scope.filterRecords($scope.itemsBackup);
                                            }
                                            else
                                                hot.loadData($scope.earliestAvailDates);  
                                           
                                            var failedCount = (typeof result[0] == 'undefined' || typeof result[0].numFailedRecords == 'undefined') ? 0 : result[0].numFailedRecords;
                                            failedRecCount += failedCount;
                                            
                                            if (failedRecCount > 0) {
                                                $scope.msgText = failedRecCount.toString() + " {!$Label.WB_EAD_Msg_SaveError}";
                                                $scope.msgSeverity = 'error';
                                            } else {
                                                $scope.msgText = "{!$Label.WB_EAD_Msg_SaveSuccess}";
                                                document.getElementById("quickSaveBtn").style.background ='white';
                                                document.getElementById("quickSaveBtn").style.color = '#d8dde6';
                                                document.getElementById("quickSaveBtn").disabled = true;
                                                $scope.msgSeverity = 'success';
                                            }
                                            
                                            var chunkTime = new Date();
                                            //console.log('Time Elapsed for chunk is Controller Last : ', (chunkTime - saveStartTime)+'---'+(((chunkTime - saveStartTime)-timeDiff)/1000));
                                    
                                            $scope.spinnerText = '';
                                            $scope.showSpinner = false;
                                            $timeout(setHeight,2);
                                            
                                            // Update UI
                                            $scope.$apply();
                                        }
                                    },{
                                        escape: false, 
                                        timeout: 120000, 
                                        buffer: false
                                    });
                                })($scope.filteredGridData, [], 0);
							}
                        };
                        
                        $scope.validateRcRecord= function(ead){
                            $scope.errorColName = [];
                            $scope.negativeCurrencyError = [];
                            if(invalidValueSet.has(ead.country)){
                                $scope.errorColName.push('{!$ObjectType.Earliest_Avail_Date__c.fields.Country__c.Label}');
                            }
                            if(invalidValueSet.has(ead.status)){
                                $scope.errorColName.push('{!$ObjectType.Earliest_Avail_Date__c.fields.Status__c.Label}');
                            }
                            if(invalidValueSet.has(ead.videoVersion)){
                                $scope.errorColName.push('{!$ObjectType.Earliest_Avail_Date__c.fields.Video_Version__c.Label}');
                            }
                            if(invalidValueSet.has(ead.channel)){
                                $scope.errorColName.push('{!$ObjectType.Earliest_Avail_Date__c.fields.Channel__c.Label}');
                            }
                            if(invalidValueSet.has(ead.format)){
                                $scope.errorColName.push('{!$ObjectType.Earliest_Avail_Date__c.fields.Format__c.Label}');
                            }                                                      
                            /*if(invalidValueSet.has(ead.earliestAvailDate)){
                                $scope.errorColName.push('{!$ObjectType.Earliest_Avail_Date__c.fields.Earliest_Avail_Date__c.Label}');
                            }*/
                            //console.log('$scope.errorColName.length -------',$scope.errorColName.length);
                            $scope.errorMessage = null;
                            if($scope.errorColName.length > 0){
                                $scope.errorMessage = 'Please enter values for these fields :'+$scope.errorColName.join(' , ');
                            }
                            
                            return $scope.errorMessage;
                        };
                        
                        function setHeight() {
                            $scope.height = (initalHeight - $("#msgDiv").height());
                            $("#tableDiv .ht_master .wtHolder").css("height",$scope.height);
                            $("#tableDiv").css("height",$scope.height);
                        };
                        
                        $scope.removeMsgBlock= function(){
                            $scope.msgText = '';
                            $scope.height = initalHeight; 
                            $("#tableDiv .ht_master .wtHolder").css("height",$scope.height);
                            $("#tableDiv").css("height",$scope.height);
                        }; 
                    }
                ]);//end of angular class
             </script>
        </head>
        <body>
            <div  xmlns:ng="http://angularjs.org" id="ng-app" ng-app="UploadEADRecords" ng-controller="UploadEADController" class="slds" ng-cloak="ngCloak">
                <!-- ===========================Spinner================================= -->   
                <div class="spinnerModel" ng-show="showSpinner">
                    <div class="spinnerContent slds-spinner--large">
                        <img src="{!URLFOR($Resource.SLDS0120, '/assets/images/spinners/slds_spinner_brand.gif')}" alt="{{spinnerText}}" />
                        <div id="spinnerText">{{spinnerText}}</div>
                    </div>
                </div>
                <!-- ===========================Spinner================================= --> 
                <!--- Filter Grid --->
                <!-- =========================== HEADER BANNER ================================-->     
                <div id="headerDiv" class="slds-page-header" role="banner">
                    <div class="slds-grid slds-wrap"> 
                    	<div class ="slds-col slds-size--2-of-10">
                    		<div class="slds-grid slds-grid--vertical">
                    			<!--Back To Home Link  -->
                    			<div class ="slds-col">
                    				<div class="slds-form-element">
                    					<nav class="slds-m-bottom--m-small" role="navigation">
                    						<p id="bread-crumb-label" class="slds-assistive-text">You are here:</p>
                    						<ol class="slds-breadcrumb slds-list--horizontal" aria-labelledby="bread-crumb-label">
                    							<li class="slds-list__item slds-text-heading--label"><a href="{!URLFOR($Action.Earliest_Avail_Date__c.Tab, $ObjectType.Earliest_Avail_Date__c)}'">{!$Label.WB_Back_To_Home_Button}</a></li>
                    						</ol>
                    					</nav>
                    				</div>
                    			</div>
                    		</div>
                    	</div>
                    	<div class ="slds-col slds-size--2-of-10">
                    		<div class="slds-grid slds-grid--vertical">
                    			<div class ="slds-col slds-p-top--x-small">
                    				<!-- Quick Search Text ::  -->
                    				<div class ="slds-form-element">
                    					<div class="slds-form-element__control">
                    						<div class="slds-form-element__control">
                    						  <input class="slds-input slds-picklist__label buttonGroupheight" style="min-height:31px !important;" ng-model="filter.EADVideoVersion" type="text" placeholder="Search Video Versions" ng-keyup="$event.keyCode == 13 ? GetEarliestAvailDateRecords() : null"/>                            
                    					  </div>
                    					</div>
                    				</div> 	
                    			</div>
                    			<div class ="slds-col slds-p-top--x-small">
                    				<!-- Quick Search Text ::  -->
                    				<div class ="slds-form-element">
                    					<div class="slds-form-element__control">
                    						<div class="slds-form-element__control">
                    						  <input class="slds-input slds-picklist__label buttonGroupheight" style="min-height:31px !important;" ng-model="filter.EADTitle" type="text" placeholder="Search Titles" ng-keyup="$event.keyCode == 13 ? GetEarliestAvailDateRecords() : null"/>                            
                    					  </div>
                    					</div>
                    				</div> 	
                    			</div>
                    		    <div class ="slds-col slds-p-top--x-small">
                    				<!-- Quick Search Text ::  -->
                    				<div class ="slds-form-element">
                						<div class="slds-form-element__control">
                						    <input class="slds-input slds-picklist__label buttonGroupheight" style="min-height:31px !important;" ng-model="filter.EADMPM" type="text" placeholder="Search MPMs" ng-keyup="$event.keyCode == 13 ? GetEarliestAvailDateRecords() : null"/>                            
	              					    </div>
                    				</div> 	
                    			</div>
                    		</div>
                    	</div>
                    	<div class ="slds-col slds-size--2-of-10">
                    		<div class="slds-grid slds-grid--vertical">
                    		    
                                <div class ="slds-col slds-p-top--x-small">
                    				<!-- Country filter  -->
                					<div class ="slds-form-element">
                                        <div class="slds-form-element__control">
                                            <crm-lookup 
                                                    record-id="filter.countryName" 
                                                    record-name="countryName" 
                                                    object-name="Country__c" 
                                                    slds-resource-loc="{{appConfig.resourceSlds}}"
                                                    lookup-change=""
                                                    place-holder="Country"/>
                                        </div>
                                    </div>
                                </div>
                    			<div class ="slds-col slds-p-top--x-small">
                    				<!-- WB Territory Filter  -->
                    				<div class="slds-form-element">
                    					<div class="slds-form-element__control picklistClass">
                    						<crm-multiselect-picklist options="picklistWrap.WBTerritoryValues.filterPicklist" selectedOpts="filter.WBTerritory" multiple="true" placeholder="WB Territory"/>
                    					</div>
                    				</div>
                    			</div> 
                    			<div class ="slds-col slds-p-top--x-small">
                    				<!-- WB Territory Filter  -->
                    				<div class="slds-form-element">
                    					<div class="slds-form-element__control picklistClass">
                    						<crm-multiselect-picklist options="picklistWrap.sourceValues.filterPicklist" selectedOpts="filter.EADSource" multiple="true" placeholder="Source"/>
                    					</div>
                    				</div>
                    			</div>
                    		</div>
                    	</div>
                    	<div class ="slds-col slds-size--2-of-10">
                    		<div class="slds-grid slds-grid--vertical">
                    			<div class ="slds-col slds-p-top--x-small"> 
                    				<!-- Channel filter  -->
                    				<div class="slds-form-element">
                    					<div class="slds-form-element__control picklistClass">
                    						<crm-multiselect-picklist options="picklistWrap.channelValues.filterPicklist" selectedOpts="filter.EADChannel" multiple="true" placeholder="{!$ObjectType.Earliest_Avail_Date__c.fields.Channel__c.Label}"/>
                    					</div>
                    				</div>
                    			</div>
                    			<div class ="slds-col slds-p-top--x-small">
                    				<!-- Format filter  -->
                    				<div class="slds-form-element">
                    					<div class="slds-form-element__control picklistClass">
                    						<crm-multiselect-picklist options="picklistWrap.formatValues.filterPicklist" selectedOpts="filter.EADFormats" multiple="true" placeholder="{!$ObjectType.Earliest_Avail_Date__c.fields.Format__c.Label}"/>
                    					</div>
                    				</div>
                    			</div>
                                <div class="slds-col slds-p-top--x-small">
                                  <div class="slds-form-element" style="Width:80%">
                                      <div class="slds-form-element__control picklistClass">
                    					<crm-multiselect-picklist options="resultFilterValues" selectedOpts="resultFilter" multiple="false" placeholder="Result Filter" ng-click="filterRecords(itemsBackup)"/>
                    				 </div>
                                  </div>
                                </div>
                                 
                    		</div>
                    	</div>
                    			
                    	<div class ="slds-col slds-size--2-of-10">
                    	    <div class="slds-grid slds-grid--align-end">
                        		<div class ="slds-col slds-p-top--large" style="padding-top: 30%;">
                    				<!-- Quick Save and Search button-->
                    				<div class="slds-form-element" style="float: right;">
                    					<div class="slds-form-element__control">
                    						<div class="slds-button-group slds-button-space-left" role="group">
                    							<button class="buttonGroupheight slds-button slds-button--neutral .slds-has-flexi-truncate" style="line-height: inherit;" ng-click="exportCSVFile()">{!$Label.WB_DownloadTemplate}</button>  
                    							<button ng-click="GetEarliestAvailDateRecords()" class="buttonGroupheight slds-button slds-button--neutral" style="line-height: inherit;">{!$Label.WB_Search_Records_Button}</button>
                    							<button id="quickSaveBtn" ng-click="SaveRecords()" class="buttonGroupheight slds-button slds-button--neutral .slds-has-flexi-truncate" disabled="true" style="line-height: inherit;">{!$Label.WB_Save_Records_Button}</button>
                    						    <button id="resetButton" ng-click="resetFilters()" class="buttonGroupheight slds-button slds-button--neutral .slds-has-flexi-truncate" style="line-height: inherit;">Reset</button>
                    						</div>
                    					</div>
                    				</div>
                    				<div class="slds-button-group" role="group"></div>
                    			</div>
                			</div>
                    	</div>
                    </div>
                </div>
                <!-- end of fitler grid -->
                <!-- ===========================Exception=============================== -->
                <div Id="msgDiv" ng-show="msgText"  class="slds-grid">
                    <div class="slds-col slds-notify  slds-theme--{{msgSeverity}} slds-notify--toast slds-box--x-small slds-theme--alert-texture" role="alert">
                        <button class="slds-button slds-button--icon-inverse slds-notify__close slds-m-right--small" ng-click="removeMsgBlock()">
                            <svg aria-hidden="true" class="slds-button__icon slds-button__icon--medium">
                                <use xlink:href="{!URLFOR($Resource.SLDS0120, '/assets/icons/utility-sprite/svg/symbols.svg#close')}"></use>
                            </svg>
                            <span class="slds-assistive-text">Close</span>
                        </button>
                        <div class="notify__content slds-grid" ng-show="msgText">
                            <svg aria-hidden="true" class="slds-col slds-icon slds-icon--small slds-m-right--small slds-no-flex" ng-show="msgSeverity == 'sucess'">
                                <use xlink:href="{!URLFOR($Resource.SLDS0120, '/assets/icons/utility-sprite/svg/symbols.svg#sucess')}"></use>
                            </svg>
                            <svg aria-hidden="true" class="slds-col slds-icon slds-icon--small slds-m-right--small slds-no-flex" ng-show="msgSeverity == 'error'">
                                <use xlink:href="{!URLFOR($Resource.SLDS0120, '/assets/icons/utility-sprite/svg/symbols.svg#error')}"></use>
                            </svg>
                            <svg aria-hidden="true" class="slds-col slds-icon slds-icon--small slds-m-right--small slds-no-flex" ng-show="msgSeverity == 'Info'">
                                <use xlink:href="{!URLFOR($Resource.SLDS0120, '/assets/icons/utility-sprite/svg/symbols.svg#info')}"></use>
                            </svg>
                            <div class="slds-col slds-align-middle">
                                <p class="slds-col slds-text-heading--small" style="font-size: 15px !important;">{{msgText}}</p>
                            </div>
                        </div>
                    </div>
                </div>
                <!-- ===========================Exception=============================== -->
             
                <!-- ===========================Dynamic Div================================= -->
                <div id="tableDiv" class="hot handsontable htColumnHeaders" style="margin: 3px 3px 0;"></div>
                <c:CRM_SLDSPicklist />
                <c:CRM_SLDSLookup />
            </div>                
        </body>
    </html>  
</apex:page>