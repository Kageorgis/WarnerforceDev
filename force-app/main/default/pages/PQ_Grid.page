<apex:page sidebar="false" readonly="true">
<script>
if(!window.sldsPath){
    //window.sldsPath = '{!URLFOR($Asset.SLDS, 'assets/icons')}';
    window.sldsPath = '/apexpages/slds/latest/assets/icons';
}
</script>
<apex:slds />
<PowerGrid:PowerGrid gridTemplateId="a4R6f000006tP0UEAU" />
<apex:form >
    
    <div id="errorDialog" style="Display:None;"/>
    <div id="processDialog" style="Display:None;"/>
</apex:form>
<script type="text/javascript">
    var __sfdcSessionId = '{!GETSESSIONID()}';
</script>
<script src="/soap/ajax/30.0/connection.js" type="text/javascript"></script>
<script src="/soap/ajax/30.0/apex.js" type="text/javascript"></script>
<script>
     var defaultObjectList = [];
     defaultObjectList['Commercial_Avail__c']='Release Plans';
     defaultObjectList['Client_Avail__c']='Client Avails';
     defaultObjectList['Title__c']='Titles';
     
     function postProcessToolbar(toolbar, objType, grid_var) {
     
         $('#objectSelContainer').show();
    
        $("#objectSel > option").each(function() {
            if(defaultObjectList[this.value] != null){
              this.text = defaultObjectList[this.value];
            }
        });
        
        if (objType == 'Title__c') {
            toolbar.push({
                       type: "button",
                       id: "add_rp",
                       img: "Configero/wizard.png",
                       tooltip: 'Generate Release Plan',
                       onClick: function(grid) {
                            var records = grid.CF_getGridCheckedRows();
                            if(records.length>50) { alert("The maximum number of titles that can be selected is 50"); return; }
                            if (records.length == 0) { alert("Please select at least one row"); return; } 
                            var ids = [];
                            for (var i = 0; i < records.length; i++) {
                                ids.push(mygrid.CF_getBufferSequenceRec(records[i]).idd);
                            }
                            ids = ids.join(',');
                            
                                                    
                        window.open('/apex/wb_create_release_plan?ID='+ids,'_blank' );        
                           
                       }
                   });
           toolbar.push({
                    type: "button",
                    id: "add_RF",
                     img: "{!$Resource.Request_Rights}",
                    tooltip: 'Request Rights',
                    onClick: function(grid) {
                        var records = grid.CF_getGridCheckedRows();
                        if(records.length>50) { alert("The maximum number of Title that can be selected is 50"); return; }
                        if (records.length == 0) { alert("Please select at least one row"); return; }
                        var ids = [];
                        for (var i = 0; i < records.length; i++) {
                            ids.push(mygrid.CF_getBufferSequenceRec(records[i]).idd);
                        }
                        ids = ids.join(',');
                        var url="apex/WB_Request_Refresh_Title?ID="+ids+"&param=std"; 
                        window.open(url, 'Popup',' height=807,width=1198,left=30,top=100,resizable=yes,scrollbars=yes,toolbar=no,status=no'); 
    
                    }
                }); 
        }
        if (objType == 'Client_Avail__c') {
            toolbar.push({
                       type: "button",
                       class: "slds-button  add slds-button--icon-border-filled",
                       id: "clone_ca",
                       img: "{!$Resource.Clone}",
                       tooltip: 'Clone Client Avail',
                       onClick: function(grid) {
                            var records = grid.CF_getGridCheckedRows();
                            if(records.length>50) { alert("The maximum number of client avails that can be selected is 50"); return; }
                            if (records.length == 0) { alert("Please select at least one row"); return; } 
                            var ids = [];
                            for (var i = 0; i < records.length; i++) {
                                ids.push(mygrid.CF_getBufferSequenceRec(records[i]).idd);
                            }
                            ids = ids.join(',');
                            window.open('/apex/WB_Clone_ClientAvail?ID='+ids,'_blank' ); 
                       }
                   });
            
            toolbar.push({
                       type: "button",
                       id: "rp_ca",
                       img: "{!$Resource.Reprice}",
                       tooltip: 'Re-Price Client Avail',
                       onClick: function(grid) {
                            var records = grid.CF_getGridCheckedRows();
                            if(records.length > 2500) { alert("The maximum number of client avails that can be selected is 2500"); return; }
                           
                            var ids = [];
                            for (var i = 0; i < records.length; i++) {
                                ids.push(mygrid.CF_getBufferSequenceRec(records[i]).idd);
                            }
                            ids = ids.join(',');
                            
                            if (records.length == 0) { 
                                 window.open('/apex/WB_PriceWizard?action=rePrice','_blank'); 
                             }else if(records.length!=0 && records.length < 24){
                                window.open('/apex/WB_PriceWizard?action=rePrice&ID='+ids,'_blank');
                            }else{
                                var uniqueId = sforce.connection.getUserInfo().userId + '' + new Date().getTime();
                                var ClientAvailIdStore = new sforce.SObject("Client_Avail_Id_Store__c");
                                ClientAvailIdStore.Key__c = uniqueId;
                                ClientAvailIdStore.ID_Store__c = ids;
                                ClientAvailIdStore.Re_Price_User__c = sforce.connection.getUserInfo().userId;
                                sforce.connection.create([ClientAvailIdStore]);
                                window.open('/apex/WB_PriceWizard?action=rePrice&UNIQUEID='+uniqueId,'_blank');
                                
                            }
                       }
                   });
                  
        
        }
        
      if (objType == 'Commercial_Avail__c') { 
            toolbar.push({
                       type: "button",
                       id: "add_ca",
                       img: "{!$Resource.CreateClientAvails}",
                       tooltip: 'Generate Client Avails',
                       onClick: function(grid) {
                            var records =grid.CF_getGridCheckedRows(); 
                            var ids = [];
                            var selected = records.length ;
                            
                           
                            if (records!=null) {
                                if (records[0] == null){
                                    alert("Please select at least one row");
                                }
                                else { 
                                    for (var i = 0; i < records.length; i++) {
                                        ids.push(mygrid.CF_getBufferSequenceRec(records[i]).idd);
                                    }
                                    ids = ids.join(','); 
                                    console.log('Length : ' + ids.length + ' : ' + ids);
                                  if(records.length < 50){
                                        window.open('/apex/WB_CreateClientAvail_Lightning?IDs='+ids,'_blank');
                                    }else{
                                        var uniqueId = sforce.connection.getUserInfo().userId + '' + new Date().getTime();
                                        var ClientAvailIdStore = new sforce.SObject("Client_Avail_Id_Store__c");
                                        ClientAvailIdStore.Key__c = uniqueId;
                                        ClientAvailIdStore.ID_Store__c = ids;
                                        ClientAvailIdStore.Re_Price_User__c = sforce.connection.getUserInfo().userId;
                                        sforce.connection.create([ClientAvailIdStore]);
                                        window.open('/apex/WB_CreateClientAvail_Lightning?UNIQUEID='+uniqueId,'_blank');
                                    }
                                   
                                }
                            }
                        }
                    });
            toolbar.push({
                       type: "button",
                       id: "split_rp",
                       img: "{!$Resource.SplitReleasePlan}",
                       tooltip: 'Split Release Plans',
                       onClick: function(grid) {
                            var records =grid.CF_getGridCheckedRows(); 
                            var ids = []; 
                            if (records!=null) {
                                if (records[0] == null){
                                    alert("Please select at least one row")
                                }
                                else {
                                    for (var i = 0; i < records.length; i++) {
                                        ids.push(mygrid.CF_getBufferSequenceRec(records[i]).idd);
                                    }
                                    ids = ids.join(','); 
                                    window.open('apex/WB_SplitReleaseplanPage?ID='+ids,'_blank'); 
                                }
                            }
                       }
                   });
                   
            //Fix Language Utility
            toolbar.push({
                       type: "button",
                       id: "fix_lang",
                       img: "{!$Resource.FixReleasePlan}",
                       tooltip: 'Fix Language',
                       onClick: function(grid) {
                            var user = sforce.connection.getUserInfo();
                            var isAuthProf = false;
                            var profs = '{!$Label.Fix_Language_Utility_Profiles}';
                           var prof = profs.split(';');
                           for (var i = 0; i < prof.length; i++) {
                               if(prof[i] == user.profileId)
                                   isAuthProf = true;
                           }
                            if(isAuthProf){
                                var records = grid.CF_getGridCheckedRows(); 
                                if(records.length > 50) { alert("The maximum number of release plan that can be selected is 50"); return; }
                                if(records.length > 0){
                                    var lstIds = []; 
                                    var mapIds = new Object(); 
                                    var lstError = [];
                                    
                                    processDialog();
                                    
                                    setTimeout(function(){
                                        try{
                                            if (records!=null) {
                                                if (records[0] != null) {
                                                    
                                                    for (var i = 0; i < records.length; i++) {
                                                        lstIds.push(mygrid.CF_getBufferSequenceRec(records[i]).idd);
                                                        mapIds[mygrid.CF_getBufferSequenceRec(records[i]).idd] = 'fixed';
                                                    }
                                                    
                                                    if(lstIds[0] != null){
                                                        var results = sforce.apex.execute("WB_FixLanguageUtility", "processFixLangauges", 
                                                        {lstRPId : lstIds}); 
                                                       
                                                        $( "#processDialog" ).dialog( "close" );
                                                        
                                                        if(results[0].includes('Exception')) {
                                                            alertDialog(results);
                                                            return;
                                                        }
                                                        else if(results[0] != null && results != 'successful' && results != 'unsuccessful'){
                                                            var strResult = results[0];
                                                            var lstId = strResult.split(',');
                                                            
                                                            var mapRPStatus = new Object(); 
                                                            
                                                            for (var k = 0; k < lstId.length; k++){
                                                                var rec = (lstId[k]).split('::');
                                                                
                                                                if(rec[0] != null){
                                                                    var recId = rec[0];
                                                                    var recStatus = rec[1];
                                                                    
                                                                    if(recStatus.includes('cta')){
                                                                        mapRPStatus[recId] = 'cta';
                                                                    }
                                                                    else if(recStatus.includes('cpyrd')){
                                                                        var originalRec = recStatus.split('~');
                                                                        mapRPStatus[recId] = 'cpyrd';
                                                                    }
                                                                }
                                                            }
                                                            
                                                            for (var i = 0; i < records.length; i++) {
                                                                if(mapRPStatus[mygrid.CF_getBufferSequenceRec(records[i]).idd] == 'cta'){
                                                                    mapIds[mygrid.CF_getBufferSequenceRec(records[i]).idd] = 'cta';
                                                                    $(mygrid.CF_getBufferSequenceRec(records[i])).css("background-color", "rgba(255, 235, 59, 0.55)");
                                                                    if(lstError.indexOf('cta') === -1)
                                                                        lstError.push('cta');
                                                                }
                                                                else if(mapRPStatus[mygrid.CF_getBufferSequenceRec(records[i]).idd] == 'cpyrd'){
                                                                    mapIds[mygrid.CF_getBufferSequenceRec(records[i]).idd] = 'cpyrd';
                                                                    $(mygrid.CF_getBufferSequenceRec(records[i])).css("background-color", "#ed6f67");
                                                                    if(lstError.indexOf('cpyrd') === -1)
                                                                        lstError.push('cpyrd');
                                                                }
                                                            }
                                                        }
                                                        
                                                        if(mapIds != null && (Object.keys(mapIds).length) > 0){
                                                            for (var i = 0; i < records.length; i++) {
                                                                if(mapIds[mygrid.CF_getBufferSequenceRec(records[i]).idd] == 'fixed'){
                                                                   $(mygrid.CF_getBufferSequenceRec(records[i])).css("background-color", "#4BC076");
                                                                   if(lstError.indexOf('fixed') === -1)
                                                                        lstError.push('fixed');
                                                                }
                                                            }
                                                        }
                                                    }
                                                    
                                                    if(lstError[0] != null)
                                                        setTimeout(function(){ alertDialog(lstError); }, 800);
                                                }
                                            }
                                        }
                                        catch(ex){}
                                    }, 1000);
                                }
                            }
                            else
                                alert('You are not an authorized user for this');
                       }
                   });
        }
     }//Added in CRRT Phase 7: Fix language utilty functionlity alert box

function alertDialog(errorMsg) {  
    try{
        var outputMsg = '<br/>';
       
        if(errorMsg[0].includes('Exception'))
            outputMsg = '<p> &#9632; '+errorMsg+'</p>';
        else{
            for (var i = 0; i < errorMsg.length; i++){
                if(errorMsg[i] == 'cta')
                    outputMsg += ' <p><span style="color:#ffc107"> &#9632; </span>Highlighted release plans cannot be fixed since Fix language utility cannot be run on a release plan with a status of Confirmed. Please first change the status to Tentative and save, then run the Fix Language Utility again.</p><br/>';
                else if(errorMsg[i] == 'cpyrd')
                    outputMsg += '<p> <span style="color:#f44336"> &#9632; </span> Highlighted release plans cannot be fixed because there is a duplicate Release plan with this combination</p><br/>';
            }
        }
        
        if(errorMsg.indexOf('cta') !== -1 || errorMsg.indexOf('cpyrd') !== -1 || errorMsg[0].includes('Exception')){
              $( "#errorDialog" ).html(outputMsg).dialog({
                  resizable: false,
                  height: "auto",
                  width: 410,
                  top: 40,
                  modal: true,
                  buttons: {
                      Ok: function() {
                        if(errorMsg.indexOf('fixed') !== -1)
                            $($('.buttons_cont tr')[4]).find('button').trigger('click');
                        $( this ).dialog( "close" );
                      }
                  }
              });
        }
        else if(errorMsg.indexOf('fixed') !== -1)
            setTimeout(function(){ $($('.buttons_cont tr')[4]).find('button').trigger('click'); }, 800); 
    }
    catch(ex){}
 }
 
 function processDialog() {  
     $( "#processDialog" ).html('<B>Processing...</B>').dialog({
          resizable: false,
          height: 100,
          width: 200,
          top: 40,
          modal: true
      });
      $('.ui-dialog-titlebar button').css("display","none");
 }
     

</script>
</apex:page>