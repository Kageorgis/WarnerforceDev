/*
* This class is called after the records are generated by annoucementment 
* process. Its is responsible for taking the list of annoucement id proccessed
* by annoucement batch process. Iterate each Annoucement and do 3 task
*   1.create a CSV file attach to the annoucement record
*   2.Send the CSV file to the announcement receipient via using Email Template.
*   3.Update Template with respective Report name by using merge field.
*   4.create FeedItem and attach to the annoucement Account record
* 
* The main logic in the class is 
* If (Announcement Record Count = 0)
*   send email to creator of this annoucement
* if (Annoucement Record count between 0 and 25000)
*   attach the annocement CSV to the record
*   send the email with email template and attach CSV
*               (Attachment vary based on size if less then 3MB 
*                           the attach else send html link)
* if (Annoucment Record count between 25000 and 75000)
*   send the email to the creator of this annoucement wiith report Link.
*   attach the annoucement CSV to the record.
* if (Annocement record count is great than 75000)
*   just send email to the creator of this annoucement with report link
* 
* The reason to develop this class as REST API because of ApexPage.getContent()
* method is not supported by Trigger, Batch process or any Async and we cannot 
* use Analytics api because of 2k records limitation. The only way to fetch the 
* report and send email is this way.
*
* @author Cognizant Technology Solution
* @version 1.0
* @date 04/30/2015
*
*/

@RestResource(urlMapping='/WB_CreateReport/*')
global class WB_CreateReport{

    global static final Integer LIMIT_25000 = 25000;
    global static final Integer LIMIT_75000 = 75000;
    global static final String EXP_URL = '?export=1&enc=UTF-8&xf=csv&pv0=';//?csv=1&pv0=
    //global static final String EXP_URL = '?csv=1&pv0=';
    global static final String EXT = '.csv';
    //global static final String CON_TYPE = 'application/vnd.ms-excel';//'text/csv';
    global static final String CON_TYPE = 'text/csv';
    global static final String EMAIL_TO = 'TO';
    global static final String EMAIL_CC = 'CC';
    global static final String EMAIL_BCC = 'BCC';
     
    /* The main method of this REST API. This has implimented the buisness
    *   logic of this class and call other funtion available in this class.
    *
    * @param ids the announcement ids are send by batch process as a comma 
    *           -seperated value. 
    */
    
    @HttpPost 
    global static void createAttachmentEmail(String ids){
    	
        System.debug('Received Ids : '+ids);
        List<String> lstAnnouncementIds = new List<String>();
        for(String id : ids.split(','))
            lstAnnouncementIds.add(id);
        CAS_Global_Settings__c globalConfig = CAS_Global_Settings__c.getValues('CAS Global Settings');
        string OWD_EMAIL_ADDRESS =  globalConfig.Global_Email__c;
        ID OWD_CONTACT_ID = (ID)globalConfig.Contact_Id__c;
        List<Announcement__c> scope = [SELECT  id,
                                            Name,
                                            Name__c,
                                            Announcement_Type__c,
                                            File_Status__c,
                                            Job_Run_Status__c,
                                            Announcement_Record_Count__c,
                                            CreatedBy.email,
                                            Sent_Date__c,
                                            Account__c,
                                            Internal__c,
                                            Announced_User__c,
                                            File_Format__c,
                                            File_Count__c
                                        FROM Announcement__c 
                                        WHERE id IN :lstAnnouncementIds];       
        //IN :lstAnnouncementIds
        /*Contact con = [SELECT id,Name 
                        FROM Contact 
                        WHERE Email=:OWD_EMAIL_ADDRESS][0];*/
        //ER-1910 Starts
        Contact con = [SELECT id,Name 
                        FROM Contact 
                        WHERE Id=:OWD_CONTACT_ID][0];
        // ER-1910 Ends
        OrgWideEmailAddress owea = [SELECT Id 
                                    FROM OrgWideEmailAddress 
                                    WHERE Address=:OWD_EMAIL_ADDRESS][0];
        //TESTannoucementListToUpdate = scope;
        for(Announcement__c annIdsFromScope: scope){
            Messaging.SingleEmailMessage sem=null;
            List<Attachment> attachmentList = new List<Attachment>();
            Attachment attachment=null;
            FeedItem accountFeedItem = new FeedItem();
            try {
            Announcement_Rule__c  AnnRuleEmailtId = [SELECT id,
                                                        Announcement_From_Email__c,
                                                        Announcement_From_Name__c,
                                                        Name,
                                                        Email_Template_Id__c ,
                                                        Report_Id__c,
                                                        Announcement_Type__c
                                                    FROM Announcement_Rule__c 
                                                    WHERE id =:annIdsFromScope.Announcement_Type__c];
            list<string> bcc = getAnnouncementRecipientEmailId(AnnRuleEmailtId.Id,EMAIL_BCC);
            list<string> cc = getAnnouncementRecipientEmailId(AnnRuleEmailtId.Id,EMAIL_CC);
            list<string> to = getAnnouncementRecipientEmailId(AnnRuleEmailtId.Id,EMAIL_TO);
            String annNum = annIdsFromScope.Name;
            String url = '/'+AnnRuleEmailtId.Report_ID__c+EXP_URL+annNum;
            ApexPages.PageReference report = new ApexPages.PageReference(url);
            String csvname = annIdsFromScope.Name__c+EXT;
            if(annIdsFromScope.Announcement_Record_Count__c < 1){
                String sub ='Report Data: '+annIdsFromScope.Name__c+' has no data.';
                String cnt = annIdsFromScope.Name__c+' The Announcement contains no entries';
                sem= createEmail(cnt,sub,null,csvname,con,owea,bcc,
                                            AnnRuleEmailtId,annIdsFromScope,null,null,null);
                accountFeedItem = feedAccountChatter(annIdsFromScope,false);
            }else if (annIdsFromScope.Announcement_Record_Count__c > WB_Announcement_Util.XLS_LIMIT || (annIdsFromScope.File_Format__c=='CSV' && annIdsFromScope.Announcement_Record_Count__c > WB_Announcement_Util.CSV_LIMIT)){
                String cnt = 'The Announcement contains more than 100K records or file size exceeding 25MB <br>.';
                cnt +=  'Please find the link to download : ';
                String rurl = 'https://' + System.URL.getSalesforceBaseUrl().getHost() + '/';
                rurl += AnnRuleEmailtId.Report_ID__c +'?pv0=' +annIdsFromScope.Name;     
                String linkUrl = '<a href='+rurl+'>Download</a>';
                cnt += linkUrl; 
                String sub ='Report Data: '+annIdsFromScope.Name__c;
                sub += ' is too large to generate file.';
                sem= createEmail(cnt,sub,null,null,null,owea,null,
                                            null,annIdsFromScope,null,null,null);
                accountFeedItem = feedAccountChatter(annIdsFromScope,true);
            }
            /*else if (annIdsFromScope.File_Status__c == 'Ready'){ 
               attachment = attachCSVFile(csvname,AnnRuleEmailtId.Report_Id__c,annNum,annIdsFromScope.Id);
               //SINC1821174 - if else code to send attachement ony when size is less than 3 mb else send link.
               if(attachment.Body.size() < 2800000){
                sem= createEmail(null,null,report,csvname,con,owea,bcc,AnnRuleEmailtId,annIdsFromScope,to,cc,attachment);
               }else{
                    String cnt = 'The Announcement contains file size exceeding 3MB <br>.';
                    cnt +=  'Please find the link to download : ';
                    String rurl = 'https://' + System.URL.getSalesforceBaseUrl().getHost() + '/';
                    rurl += AnnRuleEmailtId.Report_ID__c +'?pv0=' +annIdsFromScope.Name;     
                    String linkUrl = '<a href='+rurl+'>Download</a>';
                    cnt += linkUrl; 
                    String sub ='Report Data: '+annIdsFromScope.Name__c;
                    sub += ' has huge volume of data.';
                    sem= createEmail(cnt,sub,null,null,null,owea,null,
                                                null,annIdsFromScope,null,null,null);
               }
               accountFeedItem = feedAccountChatter(annIdsFromScope,true);
            }*/
            else if (annIdsFromScope.File_Status__c == 'Done'){ 
               Integer fileCount = Integer.valueOf(annIdsFromScope.File_Count__c);
               attachmentList = [SELECT Id,Name,Body,ContentType 
                                FROM Attachment 
                                WHERE ParentId=:annIdsFromScope.Id
                                ORDER BY LastModifiedDate desc LIMIT :fileCount];
               //SINC1821174 - if else code to send attachement ony when size is less than 3 mb else send link.
              /* if(attachment != null && attachment.Body.size() < WB_Announcement_Util.LIMIT_FILE_SIZE){
                    sem= createEmail(null,null,report,csvname,con,owea,bcc,AnnRuleEmailtId,annIdsFromScope,to,cc,attachment);
               }else{
                    String cnt = 'The Announcement contains file size exceeding 18MB <br>.';
                    cnt +=  'Please find the link to download : ';
                    String rurl = 'https://' + System.URL.getSalesforceBaseUrl().getHost() + '/';
                    //rurl += AnnRuleEmailtId.Report_ID__c +'?pv0=' +annIdsFromScope.Name;
                    if(attachment != null){
                    	rurl += attachment.Id;
                    }else{
                    	rurl += AnnRuleEmailtId.Report_ID__c +'?pv0=' +annIdsFromScope.Name;
                    }
                         
                    String linkUrl = '<a href='+rurl+'>Download</a>';
                    cnt += linkUrl; 
                    String sub ='Report Data: '+annIdsFromScope.Name__c;
                    sub += ' is too large to email.';
                    sem= createEmail(cnt,sub,null,null,null,owea,null,
                                                null,annIdsFromScope,to,null,null);
               }*/
               
               Integer attBodySize =0;
			   if(attachmentList != Null && attachmentList.size()>0){
				  
				   for(Attachment attRec : attachmentList){
    				   if(attRec != null){
    						attBodySize = attBodySize + attRec.Body.size();
    				   }
						
				   }
			   }
			   
			   if(attachmentList != Null && attachmentList.size()>0 && attBodySize < WB_Announcement_Util.LIMIT_FILE_SIZE){
			        sem= createEmail(null,null,report,csvname,con,owea,bcc,AnnRuleEmailtId,annIdsFromScope,to,cc,attachmentList);
			   }else{
				    String cnt = 'The Announcement contains file size exceeding 18MB.<br>';
                    cnt +=  'Please find the link to download : <br>';
                    String linkUrl = '';
                    
                    if(attachmentList != Null && attachmentList.size()>0){
                        for(Attachment attRec : attachmentList){
                            String attachmentFileName = attRec.Name;
                            attachmentFileName = attachmentFileName.remove(annIdsFromScope.Name__c);
                            attachmentFileName = attachmentFileName.substringBeforeLast('.xlsx');
                            
                            String rurl = 'https://'+System.URL.getSalesforceBaseUrl().getHost() + '/'+attRec.Id;
                            linkUrl = linkUrl +attachmentFileName+' : '+ '<a href='+rurl+'>Download</a>'+'<br>';
                        }
                    }  
                    
                       
                    if(linkUrl != Null && linkUrl !=''){
                        cnt += linkUrl;
                    }else{
                        String reportLink = 'https://' + System.URL.getSalesforceBaseUrl().getHost() + '/'+AnnRuleEmailtId.Report_ID__c +'?pv0=' +annIdsFromScope.Name;
                        cnt += reportLink;
                    }
                       
                       
                    String sub ='Report Data: '+annIdsFromScope.Name__c;
                    sub += ' is too large to email.';
                    sem= createEmail(cnt,sub,null,null,null,owea,null,
                                                null,annIdsFromScope,to,null,null);
                       
			  }
			  accountFeedItem = feedAccountChatter(annIdsFromScope,true);
            }else{
          
            }
            //End is good everything thing will be good
            if(sem!= null)
                Messaging.sendEmail( new Messaging.SingleEmailMessage[] {sem});
            annIdsFromScope.Job_Run_Status__c = 'Completed';
            update annIdsFromScope;
            If(!annIdsFromScope.Internal__c){
                if(accountFeedItem!=null)
                    insert accountFeedItem;
                //if(attachment!=null)
                    //insert attachment;
            }            
            //Id batchInstanceId = Database.executeBatch(new WB_UpdateAOOnCABatchProcess (lstAnnouncementIds), 10);
            }catch (Exception e){
                System.debug('Exception '+e);
            }           
       } //end of for loop
    
    }
    
    
    //@HttpPost
    global static void createReportEmail(String ids){
        System.debug('Received Ids : '+ids);
        List<String> lstAnnouncementIds = new List<String>();
        for(String id : ids.split(','))
            lstAnnouncementIds.add(id);
        CAS_Global_Settings__c globalConfig = CAS_Global_Settings__c.getValues('CAS Global Settings');
        string OWD_EMAIL_ADDRESS =  globalConfig.Global_Email__c;
        ID OWD_CONTACT_ID = (ID)globalConfig.Contact_Id__c;
        List<Announcement__c> scope = [SELECT  id,
                                            Name,
                                            Name__c,
                                            Announcement_Type__c,
                                            File_Status__c,
                                            Job_Run_Status__c,
                                            Announcement_Record_Count__c,
                                            CreatedBy.email,
                                            Sent_Date__c,
                                            Account__c,
                                            Internal__c,
                                            Announced_User__c
                                        FROM Announcement__c 
                                        WHERE id IN :lstAnnouncementIds];       
        
        /*Contact con = [SELECT id,Name 
                        FROM Contact 
                        WHERE Email=:OWD_EMAIL_ADDRESS][0];*/
        //ER-1910 Starts
        Contact con = [SELECT id,Name 
                        FROM Contact 
                        WHERE Id=:OWD_CONTACT_ID][0];
        // ER-1910 Ends
        OrgWideEmailAddress owea = [SELECT Id 
                                    FROM OrgWideEmailAddress 
                                    WHERE Address=:OWD_EMAIL_ADDRESS][0];
        //TESTannoucementListToUpdate = scope;
        for(Announcement__c annIdsFromScope: scope){
            Messaging.SingleEmailMessage sem=null;
            Attachment attachment=null;
            FeedItem accountFeedItem = new FeedItem();
            try {
            Announcement_Rule__c  AnnRuleEmailtId = [SELECT id,
                                                        Announcement_From_Email__c,
                                                        Announcement_From_Name__c,
                                                        Name,
                                                        Email_Template_Id__c ,
                                                        Report_Id__c,
                                                        Announcement_Type__c
                                                    FROM Announcement_Rule__c 
                                                    WHERE id =:annIdsFromScope.Announcement_Type__c];
            list<string> bcc = getAnnouncementRecipientEmailId(AnnRuleEmailtId.Id,EMAIL_BCC);
            list<string> cc = getAnnouncementRecipientEmailId(AnnRuleEmailtId.Id,EMAIL_CC);
            list<string> to = getAnnouncementRecipientEmailId(AnnRuleEmailtId.Id,EMAIL_TO);
            String annNum = annIdsFromScope.Name;
            String url = '/'+AnnRuleEmailtId.Report_ID__c+EXP_URL+annNum;
            ApexPages.PageReference report = new ApexPages.PageReference(url);
            String csvname = annIdsFromScope.Name__c+EXT;
            if(annIdsFromScope.Announcement_Record_Count__c < 1){
                String sub ='Report Data: '+annIdsFromScope.Name__c+' has no data.';
                String cnt = annIdsFromScope.Name__c+' The Announcement contains no entries';
                sem= createEmail(cnt,sub,null,csvname,con,owea,bcc,
                                            AnnRuleEmailtId,annIdsFromScope,null,null,null);
                accountFeedItem = feedAccountChatter(annIdsFromScope,false);
            }else if (annIdsFromScope.Announcement_Record_Count__c > LIMIT_25000){
                String cnt = 'The Announcement contains more than 25K records <br>.';
                cnt +=  'Please find the link to download : ';
                String rurl = 'https://' + System.URL.getSalesforceBaseUrl().getHost() + '/';
                rurl += AnnRuleEmailtId.Report_ID__c +'?pv0=' +annIdsFromScope.Name;     
                String linkUrl = '<a href='+rurl+'>Download</a>';
                cnt += linkUrl; 
                String sub ='Report Data: '+annIdsFromScope.Name__c;
                sub += ' has huge volume of data.';
                sem= createEmail(cnt,sub,null,null,null,owea,null,
                                            null,annIdsFromScope,null,null,null);
                accountFeedItem = feedAccountChatter(annIdsFromScope,true);
            }
            else if (annIdsFromScope.File_Status__c == 'Ready'){ 
               attachment = attachCSVFile(csvname,AnnRuleEmailtId.Report_Id__c,annNum,annIdsFromScope.Id);
               //SINC1821174 - if else code to send attachement ony when size is less than 3 mb else send link.
               if(attachment.Body.size() < 2800000){
               // sem= createEmail(null,null,report,csvname,con,owea,bcc,AnnRuleEmailtId,annIdsFromScope,to,cc,attachment);
               }else{
                    String cnt = 'The Announcement contains file size exceeding 3MB <br>.';
                    cnt +=  'Please find the link to download : ';
                    String rurl = 'https://' + System.URL.getSalesforceBaseUrl().getHost() + '/';
                    rurl += AnnRuleEmailtId.Report_ID__c +'?pv0=' +annIdsFromScope.Name;     
                    String linkUrl = '<a href='+rurl+'>Download</a>';
                    cnt += linkUrl; 
                    String sub ='Report Data: '+annIdsFromScope.Name__c;
                    sub += ' has huge volume of data.';
                    sem= createEmail(cnt,sub,null,null,null,owea,null,
                                                null,annIdsFromScope,null,null,null);
               }
               accountFeedItem = feedAccountChatter(annIdsFromScope,true);
            }
            else if (annIdsFromScope.File_Status__c == 'Done'){ 
               attachment = [SELECT Id,Name,Body,ContentType 
                                FROM Attachment 
                                WHERE ParentId=:annIdsFromScope.Id
                                ORDER BY LastModifiedDate desc
                                LIMIT 1 ];
               //SINC1821174 - if else code to send attachement ony when size is less than 3 mb else send link.
               if(attachment.Body.size() < 2800000){
                    //sem= createEmail(null,null,report,csvname,con,owea,bcc,AnnRuleEmailtId,annIdsFromScope,to,cc,attachment);
               }else{
                    String cnt = 'The Announcement contains file size exceeding 3MB <br>.';
                    cnt +=  'Please find the link to download : ';
                    String rurl = 'https://' + System.URL.getSalesforceBaseUrl().getHost() + '/';
                    rurl += AnnRuleEmailtId.Report_ID__c +'?pv0=' +annIdsFromScope.Name;     
                    String linkUrl = '<a href='+rurl+'>Download</a>';
                    cnt += linkUrl; 
                    String sub ='Report Data: '+annIdsFromScope.Name__c;
                    sub += ' has huge volume of data.';
                    sem= createEmail(cnt,sub,null,null,null,owea,null,
                                                null,annIdsFromScope,to,null,null);
               }
               accountFeedItem = feedAccountChatter(annIdsFromScope,true);
            }else{
          
            }
            //End is good everything thing will be good
            if(sem!= null)
                Messaging.sendEmail( new Messaging.SingleEmailMessage[] {sem});
            annIdsFromScope.Job_Run_Status__c = 'Completed';
            update annIdsFromScope;
            If(!annIdsFromScope.Internal__c){
                if(accountFeedItem!=null)
                    insert accountFeedItem;
                //if(attachment!=null)
                    //insert attachment;
            }            
            //Id batchInstanceId = Database.executeBatch(new WB_UpdateAOOnCABatchProcess (lstAnnouncementIds), 10);
            }catch (Exception e){
                System.debug('Exception '+e);
            }           
       } //end of for loop
    }
    
    /* Method is use to Posts a message to Account’s Chatter Feed 
       saying “<Announcement Name> has been sent.”
    */
    @TestVisible static FeedItem feedAccountChatter(Announcement__c announcementInfo,
                                                    boolean isReportHasData){       
        FeedItem post = new FeedItem();
        post.ParentId = announcementInfo.Account__c; //eg. Account id
        if(isReportHasData){
            post.Body = announcementInfo.Name__c + ' has been sent.'+'\n'
                        +System.Label.Redirect_Commercial_Avail_Details
                                                +announcementInfo.Id;
        }else {
            post.Body = announcementInfo.Name__c + ' has no entries.';
        }   
        //update announcementInfo;
        return post;
    }
    
    /*
        This method is responsible for creating the Email Message. Their is lot
        of funtionality in this method.
        1. All the message which are send should be from a particular email 
            address. For this we have set the OWEA(Organization Wide Email
            Address). Use this email address to send email
            setup->Email Administration-Organization-Wide Email Addresses
        2. Email Template should give the report format name.
            For this we are using Contact Object in setTargetObjectId and
            Annoucement record id in What id. Using this we can replace the
            merge field which we will use in report.
        3. We are doing Merge field manipulation Only if the Email use Template
            that why the code is inside if block
        4. If Application is sending attachment then only we will use BCC and 
            Template. Else email will be send only to the Originator of this
            batch process.      
    */
    @TestVisible static Messaging.SingleEmailMessage createEmail(String emailContent,
                    String emailSubject,ApexPages.PageReference report,
                      String attachName,Contact con, OrgWideEmailAddress owea,
                        List<String> bcc, Announcement_Rule__c  AnnRuleEmailtId,
                        Announcement__c ann,List<String> to,List<String> cc,List<Attachment> attchmntList){
        Messaging.SingleEmailMessage message = new Messaging.SingleEmailMessage();
        /* check for emailContent. If emailContent available then use it else
        the email template attach with Annoucement Type Records. */
        if(emailContent != null){
            message.setHtmlBody(emailContent); 
            message.setSubject(emailSubject);
            //message.setTargetObjectId(UserInfo.getUserId());
            message.setToAddresses(new String[] { ann.CreatedBy.email });  
        }else {
            EmailTemplate templateId = [SELECT id,Subject, HtmlValue, Body, name 
                            FROM EmailTemplate 
                            WHERE id = : AnnRuleEmailtId.Email_Template_Id__c];
            message.setTemplateId(templateId.id);
        }
        /*  Check for report data available for email attachment. If report
            data available for report . It will attach it else will
            not do anything */
        if(report != null){
            List<Messaging.EmailFileAttachment> listmsgAtt = new List<Messaging.EmailFileAttachment>();
			for(Attachment attchmntRec : attchmntList){
				Messaging.EmailFileAttachment attachment = 
                                        new Messaging.EmailFileAttachment();
				attachment.setFileName(attchmntRec.Name);
				attachment.setBody(attchmntRec.Body);
				attachment.setContentType(attchmntRec.ContentType);
				listmsgAtt.add(attachment);
			}
            
            
            /*Messaging.EmailFileAttachment attachment = 
                                        new Messaging.EmailFileAttachment();
            // attachment = attchmnt;
            attachment.setFileName(attchmnt.Name);
            attachment.setBody(attchmnt.Body);
            attachment.setContentType(attchmnt.ContentType);*/
            message.setFileAttachments(listmsgAtt);
                                                                    
            //Do the remaining task;
            message.setTargetObjectId(con.Id);
            message.setWhatId(ann.id);
            bcc.add(ann.CreatedBy.email);
            message.setBccAddresses(bcc);
            message.setCcAddresses(cc);
            message.setToAddresses(to);
            
            if(ann.Internal__c){
                message.setBccAddresses(null);
                message.setCcAddresses(null);
                message.setToAddresses(new List<String>{[SELECT Id,email FROM user where Id = :ann.Announced_User__c LIMIT 1].email});
            }           
            
        }
        message.setOrgWideEmailAddressId(owea.Id);
        message.setSaveAsActivity(false); 
        return message;
    }
    
    /*
        This funtion is reponsible for create a Attachment record and send it 
        back to calling funtion. 
        @param filename: Filename of the the Attachment
        @param report : Actual VF page which contain the report
        @param parentId : Annoucement record where we will add this attachment 
                        in notes and attachment section.
        @return attachment record
    */
    @TestVisible static Attachment attachCSVFile(String filename,
                            String reportId,String recordId,String parentId){
        Attachment attachment = new Attachment();
        attachment.Body =  getCSVContent(reportId,recordId);
        attachment.Name = filename;
        attachment.ParentId = parentId; 
        attachment.ContentType = CON_TYPE;               
        return attachment;                          
    }
    
    // this method is used to get Announcement Receipient from Announcement Rule id
     @TestVisible static list<String> getAnnouncementRecipientEmailId(string annoucementTypeId,
                                                String toccbcc) {
        list<Announcement_Receipient__c> 
            annReceipientRecords = [SELECT id,
                                        name,
                                        Announcement_Type__c,
                                        Contact__c 
                                    FROM Announcement_Receipient__c
                                    WHERE Announcement_Type__c =: annoucementTypeId
                                    AND TO_CC_BCC__c = :toccbcc];
        set<id> contactIdList = new set<id>();                                      
        for(Announcement_Receipient__c annRecords :annReceipientRecords){
            contactIdList.add(annRecords.Contact__c);
        }       
        list<Contact> contactRecords = [SELECT id,FirstName,Email 
                                        FROM Contact WHERE Id =: contactIdList];
        List<String> sendTo = new List<String>();
        for (Contact con : contactRecords) {
            if (con.Email != null && con.FirstName != null) {
                sendTo.add(con.Email);
            }
        }
        return sendTo;
    }
    
    @TestVisible static Blob getCSVContent(String reportId,String recordId){
        if(Test.isRunningTest())
            recordId = 'AN-999999999';
        Reports.ReportDescribeResult describe = Reports.ReportManager.describeReport(reportId);
        Reports.ReportMetadata reportMd = describe.getReportMetadata();
        Reports.ReportFilter filter = reportMd.getReportFilters()[0];
        filter.setValue(recordId);
        Reports.ReportResults reportResults = Reports.ReportManager.runReport(reportId, reportMd,true);
        
        Reports.ReportFactWithDetails factWithDetails = (Reports.ReportFactWithDetails) reportResults.getFactMap().get('T!T');
        list<String> columnStringWithProperName = new list<string>();
        for (String colName : reportResults.getReportMetadata().getDetailColumns()) {
          columnStringWithProperName.add(reportResults.getReportExtendedMetadata().getDetailColumnInfo().get(colName).getLabel() );
    }
        /*
        list<String> columnString = reportMd.getDetailColumns();
        for(string columnStr: columnString){
            columnStringWithProperName.add(columnStr.subString(columnStr.IndexOf('.',0)+1).replace('__c','').replace('_',' ')); 
        }*/
        string finalstr = '' ;
            finalstr +='"';
        for(string str :columnStringWithProperName){
            finalstr+= ''+str+'","';   
        }
        System.debug('finalstr :'+finalstr);
        for (Reports.ReportDetailRow row : factWithDetails.getRows()) {
            string recordString='';
            recordString+= '"';
            for (Reports.ReportDataCell cell : row.getDataCells()) {
                recordString+=   ''+cell.getLabel()+'","';
            } 
            finalstr = finalstr +'"\n' + recordString;
        }
        String BOM = '\uFEFF';  //Byte Order Mark - tells Excel to open this as utf-8 encoded.
        String bomString = BOM+finalstr;      
        return Blob.valueOf(bomString);
    }

}